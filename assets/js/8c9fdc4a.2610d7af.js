"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[7345],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=i(n),p=r,d=m["".concat(l,".").concat(p)]||m[p]||h[p]||c;return n?a.createElement(d,s(s({ref:t},u),{},{components:n})):a.createElement(d,s({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,s=new Array(c);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var i=2;i<c;i++)s[i]=n[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6091:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>i});var a=n(7462),r=(n(7294),n(3905));const c={title:"Caching and Asynchronous Excel UDFs",date:"2013-04-02 23:32:00 -0000",authors:"govert",tags:["samples","async","csharp","cache","excel","udf"]},s=void 0,o={permalink:"/blog/2013/04/02/caching-and-asynchronous-excel-udfs",source:"@site/blog/2013-04-02-caching-and-asynchronous-excel-udfs.md",title:"Caching and Asynchronous Excel UDFs",description:"This sample shows how the result of an Excel-DNA async UDF call can be cached using the .NET 4 MemoryCache class.",date:"2013-04-02T23:32:00.000Z",formattedDate:"April 2, 2013",tags:[{label:"samples",permalink:"/blog/tags/samples"},{label:"async",permalink:"/blog/tags/async"},{label:"csharp",permalink:"/blog/tags/csharp"},{label:"cache",permalink:"/blog/tags/cache"},{label:"excel",permalink:"/blog/tags/excel"},{label:"udf",permalink:"/blog/tags/udf"}],readingTime:1.68,hasTruncateMarker:!1,authors:[{name:"Govert van Drimmelen",url:"https://github.com/Excel-DNA",imageURL:"https://avatars.githubusercontent.com/u/414659",key:"govert"}],frontMatter:{title:"Caching and Asynchronous Excel UDFs",date:"2013-04-02 23:32:00 -0000",authors:"govert",tags:["samples","async","csharp","cache","excel","udf"]},prevItem:{title:"F# and R in Excel",permalink:"/blog/2013/08/05/f-and-r-in-excel"},nextItem:{title:"Async and event-streaming Excel UDFs with F#",permalink:"/blog/2013/03/26/async-and-event-streaming-excel-udfs-with-f"}},l={authorsImageUrls:[void 0]},i=[],u={toc:i};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This sample shows how the result of an Excel-DNA async UDF call can be cached using the .NET 4 MemoryCache class."),(0,r.kt)("p",null,"PS: Apparently there is a bug in the memory management of the .NET MemoryCache class. See the ",(0,r.kt)("a",{parentName:"p",href:"http://stackoverflow.com/questions/6895956/memorycache-strangeness"},"StackOverflow discussion")," and the ",(0,r.kt)("a",{parentName:"p",href:"https://connect.microsoft.com/VisualStudio/feedback/details/806334/system-runtime-caching-memorycache-do-not-respect-memory-limits#"},"Connect bug report"),". The ",(0,r.kt)("a",{parentName:"p",href:"http://www.nuget.org/packages/SharpMemoryCache"},"SharpMemoryCache NuGet package")," might be an alternative, though I've not tried it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<DnaLibrary Name="CachedAsyncSample" RuntimeVersion="v4.0" Language="C#">\n\n  <Reference Name="System.Runtime.Caching" />\n  <![CDATA[\n    using System;\n    using System.Threading;\n    using System.Runtime.Caching;\n    using ExcelDna.Integration;\n    \n    public static class dnaFunctions\n    {\n        public static object dnaCachedAsync(string input)\n        {\n            // First check the cache, and return immediately \n            // if we found something.\n            // (We also need a unique key to identify the cache item)\n            string key = "dnaCachedAsync:" + input;\n            ObjectCache cache = MemoryCache.Default; \n            string cachedItem = cache[key] as string;\n            if (cachedItem != null) \n                return cachedItem;\n    \n            // Not in the cache - make the async call \n            // to retrieve the item. (The second parameter here should identify \n            // the function call, so would usually be an array of the input parameters, \n            // but here we have the identifying key already.)\n            object asyncResult = ExcelAsyncUtil.Run("dnaCachedAsync", key, () => \n            {\n                // Here we fetch the data from far away....\n                // This code will run on a ThreadPool thread.\n    \n                // To simulate a slow calculation or web service call,\n                // Just sleep for a few seconds...\n                Thread.Sleep(5000);\n    \n                // Then return the result\n                return "The calculation with input " \n                        + input + " completed at " \n                        + DateTime.Now.ToString("HH:mm:ss");\n            });\n    \n            // Check the asyncResult to see if we\'re still busy\n            if (asyncResult.Equals(ExcelError.ExcelErrorNA))\n                return "!!! Fetching data";\n    \n            // OK, we actually got the result this time.\n            // Add to the cache and return\n            // (keeping the cached entry valid for 1 minute)\n            // Note that the function won\'t recalc automatically after \n            //    the cache expires. For this we need to go the \n            //    RxExcel route with an IObservable.\n            cache.Add(key, asyncResult, DateTime.Now.AddMinutes(1), null);\n            return asyncResult;\n        }\n    \n        public static string dnaTest()\n        {\n            return "Hello from CachedAsyncSample";\n        }\n    }\n\n  ]]>\n</DnaLibrary>\n')))}h.isMDXComponent=!0}}]);