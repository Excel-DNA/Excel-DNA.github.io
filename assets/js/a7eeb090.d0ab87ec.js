"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[1965],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>p});var a=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)i=r[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=c(i),p=n,m=h["".concat(s,".").concat(p)]||h[p]||u[p]||r;return i?a.createElement(m,o(o({ref:t},d),{},{components:i})):a.createElement(m,o({ref:t},d))}));function p(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=i.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<r;c++)o[c]=i[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,i)}h.displayName="MDXCreateElement"},6832:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=i(7462),n=(i(7294),i(3905));const r={sidebar_position:1},o=void 0,l={unversionedId:"archive/wiki/Home",id:"archive/wiki/Home",title:"Home",description:"Welcome to the Excel-DNA wiki!",source:"@site/docs/archive/wiki/Home.md",sourceDirName:"archive/wiki",slug:"/archive/wiki/Home",permalink:"/Website/docs/archive/wiki/Home",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Wiki",permalink:"/Website/docs/category/wiki"},next:{title:"AssemblyLoadContext-Notes",permalink:"/Website/docs/archive/wiki/AssemblyLoadContext-Notes"}},s={},c=[{value:"What is Excel-DNA?",id:"what-is-excel-dna",level:3},{value:"Aren&#39;t there other ways to create Excel add-ins with .NET? Why should I use Excel-DNA?",id:"arent-there-other-ways-to-create-excel-add-ins-with-net-why-should-i-use-excel-dna",level:3},{value:"Shouldn&#39;t I just stick to the official Microsoft tools for making Excel add-ins, rather than relying on a third-party tool?",id:"shouldnt-i-just-stick-to-the-official-microsoft-tools-for-making-excel-add-ins-rather-than-relying-on-a-third-party-tool",level:3},{value:"What about VBA? Can Excel-DNA help me use my VBA skills and still move to .NET?",id:"what-about-vba-can-excel-dna-help-me-use-my-vba-skills-and-still-move-to-net",level:3}],d={toc:c};function u(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Welcome to the Excel-DNA wiki!"),(0,n.kt)("p",null,"The wiki in this project will be used to document the internal implementation of the Excel-DNA core library (the native code .xll, ExcelDna.Loader and ExcelDna.Integration). Documentation for those using Excel-DNA to build add-in should go into the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Excel-DNA/Excel-DNA.github.io"},"https://github.com/Excel-DNA/Excel-DNA.github.io")," repository."),(0,n.kt)("h3",{id:"what-is-excel-dna"},"What is Excel-DNA?"),(0,n.kt)("p",null,"Excel-DNA is a library to help you make Excel add-ins with .NET. Your add-in can be written in VB.NET, C# or F# (or a combination of these), using the Visual Studio IDE or a just a text editor."),(0,n.kt)("h3",{id:"arent-there-other-ways-to-create-excel-add-ins-with-net-why-should-i-use-excel-dna"},"Aren't there other ways to create Excel add-ins with .NET? Why should I use Excel-DNA?"),(0,n.kt)("p",null,"There are a few different ways of making Excel add-ins with .NET, but Excel-DNA has unique advantages. First, let me explain the different kind of Excel add-ins."),(0,n.kt)("p",null,"Now let's put together a list of the different ways to make an Excel add-in with .NET:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"VSTO"),(0,n.kt)("li",{parentName:"ul"},"COM add-in"),(0,n.kt)("li",{parentName:"ul"},"C API"),(0,n.kt)("li",{parentName:"ul"},"Other libraries - NetOffice, Add-In Express, FCell.")),(0,n.kt)("p",null,"Finally, where does Excel-DNA fit in? Excel-DNA brings together all three parts we need to make a great Excel add-in with .NET - the native Excel C API, the COM object model and the .NET runtime."),(0,n.kt)("h3",{id:"shouldnt-i-just-stick-to-the-official-microsoft-tools-for-making-excel-add-ins-rather-than-relying-on-a-third-party-tool"},"Shouldn't I just stick to the official Microsoft tools for making Excel add-ins, rather than relying on a third-party tool?"),(0,n.kt)("p",null,"Using only the Microsoft tools, it has been hard to make powerful and full-featured Excel add-ins with .NET, that work in different Excel versions, and are easy to deploy. Some of the problems are:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Microsoft has no official support for using the native Excel C API in .NET add-ins"),(0,n.kt)("li",{parentName:"ul"},"VSTO has no support for making user-defined worksheet functions"),(0,n.kt)("li",{parentName:"ul"},"Automation add-ins can provide UDF, but have poor performance, and allow limited customization"),(0,n.kt)("li",{parentName:"ul"},"VSTO and regular COM-based add-ins require administrative rights to install")),(0,n.kt)("p",null,"What if I want to make an Excel add-in with Python, C or C++?"),(0,n.kt)("p",null,"Excel-DNA is used for making Excel add-ins with .NET. There are similar libraries that integrate with the native Excel C API, for making add-ins with other languages."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Python: PyXLL"),(0,n.kt)("li",{parentName:"ul"},"C/C++: Xlw, XLL+"),(0,n.kt)("li",{parentName:"ul"},"Modern C++: xll8.")),(0,n.kt)("h3",{id:"what-about-vba-can-excel-dna-help-me-use-my-vba-skills-and-still-move-to-net"},"What about VBA? Can Excel-DNA help me use my VBA skills and still move to .NET?"),(0,n.kt)("p",null,"VB.NET is the newest member of the Visual Basic family. While sometimes overshadowed in popularity by C#, VB.NET is as powerful as C# (sometimes more!), can access all the same .NET libraries, and is fully supported for making Excel-DNA add-ins. While VB.NET gives a familiar syntax if you're coming from VBA, there are still a few changes that you need to get used to. But rest assured that VB.NET gives you access to the full power of .NET and Excel-DNA."),(0,n.kt)("p",null,"Excel-DNA add-ins can also integrate with VBA code by creating your own COM libraries that can be called from VBA. One advantage in putting these libraries inside an Excel-DNA add-in is that they can be deployed without requiring registration with administrator privileges."))}u.isMDXComponent=!0}}]);