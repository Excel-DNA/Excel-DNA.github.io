"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/03/07/excel-dna-1.6-.net6-packagereference-anti-virus","metadata":{"permalink":"/blog/2022/03/07/excel-dna-1.6-.net6-packagereference-anti-virus","source":"@site/blog/2022-03-07-excel-dna-1.6-.net6-packagereference-anti-virus.md","title":"Excel-DNA 1.6 \u2013 .NET 6 / PackageReference / Anti-virus","description":"Excel-DNA version 1.6 is now available for testing as pre-release version 1.6.0-preview3 from the NuGet package repository. The extension libraries ExcelDna.Registration and ExcelDna.IntelliSense also have matching releases. ExcelDnaDoc should follow in the coming weeks.","date":"2022-03-07T00:36:00.000Z","formattedDate":"March 7, 2022","tags":[{"label":".NET","permalink":"/blog/tags/net"},{"label":"Excel","permalink":"/blog/tags/excel"},{"label":"ExcelDNA","permalink":"/blog/tags/excel-dna"},{"label":"XLL","permalink":"/blog/tags/xll"}],"readingTime":5.93,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA 1.6 \u2013 .NET 6 / PackageReference / Anti-virus","date":"2022-03-07 00:36:00 -0000","authors":"govert","tags":[".NET","Excel","ExcelDNA","XLL"]},"nextItem":{"title":"Update v 1.5 / Sponsors / Roadmap","permalink":"/blog/2021/07/15/update-v1.5-sponsors-roadmap"}},"content":"Excel-DNA version 1.6 is now available for testing as pre-release version 1.6.0-preview3 from the NuGet package repository. The extension libraries ExcelDna.Registration and ExcelDna.IntelliSense also have matching releases. ExcelDnaDoc should follow in the coming weeks.\\n\\nThe main focus for version 1.6 is to provide a first preview of the support for add-ins that target .NET 6. As a prerequisite to adding the .NET 6 target, we\u2019ve also added support for new SDK-style project files and NuGet references (also great for projects that target .NET Framework). I\u2019ve also taken the opportunity to tweak the Excel-DNA packing mechanism a bit in an attempt to avoid some of the false positive anti-virus detections we\u2019ve seen recently. I\u2019ll briefly discuss these (in reverse order) below, but first a word about our sponsors.\\n\\n## GitHub sponsors\\n\\nExcel-DNA is now registered on GitHub sponsors \u2013 see https://github.com/sponsors/Excel-DNA. Thank you very much to everyone who has already signed up \u2013 your contributions are directly funding further development.\\n\\nIf you use Excel-DNA and would like to encourage future support and ongoing development, please sign up as a GitHub sponsor for the project. GitHub sponsors will also have access to a private repository of sample projects where I hope to add additional tools and documentation over time.\\n\\nI had previously considered the .NET Core / .NET 6 support as a good point to switch to a commercial model for Excel-DNA. However, the benefits of being an open-source project with a permissive license have been significant. So, if possible, I hope to continue with the core library as free and open source software, where further development is funded by the sponsors.\\n\\nFor those in a corporate setting using Excel-DNA extensively or in a mission critical role, I also offer an annual corporate support agreement. Please contact me directly if you are interested in more details.\\n\\n## Anti-virus false positives\\n\\nOver the last year we\u2019ve seen a number of anti-virus and security programs identify Excel-DNA add-ins as security risks, including false positive detections that delete add-in files by the default Windows Defender service. It seems that these detections were triggered by some malicious Excel add-ins that have been built using Excel-DNA, with the anti-virus heuristics subsequently identifying all Excel-DNA add-ins as problematic. For some security vendors, including Microsoft, we\u2019ve been able to report this false positive detection and they have updated their signatures accordingly. But in many cases the Excel-DNA version 1.5 add-ins are still being flagged.\\n\\nIt seems the main heuristic used to detect Excel .xll add-ins as problematic is the presence of executable assemblies as resources in the .xll library. Excel-DNA uses the packing of assemblies as resources in the .xll to simplify the add-in distribution, in many cases making possible a single file (or two files for 32-bit and 64-bit) add-in distribution.\\n\\nFor this version there are two changes which may help with these false positives.\\n\\nThe first is that packed files are now encoded, so that they are not detected as embedded executable code directly. In my testing that change removed the false positive detections at least in the Microsoft products. However, at least one other user has reported still seeing problems with this version, so it does not seem like bulletproof solution.\\n\\nAnother option has been contributed by user @Phundamentals (thank you!), to add a project property which disables the compression of packed files.\\n\\n```xml\\n  <ExcelDnaPackCompressResources>false</ExcelDnaPackCompressResources>\\n```\\n\\nShould these mitigations not be enough to reduce most false positives, we could also introduce an option where there are no packed files at all (currently the managed Excel-DNA assemblies are always packed).\\n\\nThere have also been some indications that signing the final add-in library helps reduce false positive detections.\\n\\nIn all cases I do encourage developers to report the false positives to their anti-virus or security vendor. Their software is mistakenly identifying and blocking legitimate add-ins from running.\\n\\nDevelopers of malicious add-ins are welcome to contact me for sponsored licenses of an alternative add-in framework.\\n\\n## PackageReference and SDK-style project files\\n\\nThe main ExcelDna.AddIn NuGet package now supports references in SDK-style project files. For new projects, this means that a .dna file is no longer added to the project automatically, and if not present will be created and output at build time from project properties. Existing projects with customized .dna file(s) will work as they did before.\\n\\nFor a new project, a simple project file might look like this:\\n\\n```xml\\n<Project Sdk=\\"Microsoft.NET.Sdk\\">\\n\\n  <PropertyGroup>\\n    <TargetFramework>net472</TargetFramework>\\n\\n    \x3c!-- We don\'t need the extra \'ref\' directory and reference assemblies for the Excel add-in --\x3e\\n    <ProduceReferenceAssembly>false</ProduceReferenceAssembly>\\n\\n    \x3c!-- We need all dependencies to be copied to the output directory, as-if we are an \'application\' and not a \'library\'.\\n         This property also sets the CopyLockFileAssemblies property to true. --\x3e\\n    <EnableDynamicLoading>true</EnableDynamicLoading>\\n  </PropertyGroup>\\n\\n  <ItemGroup>\\n    <PackageReference Include=\\"ExcelDna.AddIn\\" Version=\\"1.6.0-preview3\\" />\\n  </ItemGroup>\\n\\n</Project>\\n```\\n\\nVarious additional properties can be set in the project file \u2013 see the example here https://github.com/Excel-DNA/ExcelDna/blob/master/Source/Tests/ExcelDna.AddIn.Tasks.IntegrationTests.TestTarget/SDKProperties/SDKProperties.csproj\\n\\n## .NET 6 support\\n\\nExcel-DNA version 1.6 (finally!) includes support for add-ins that target .NET 6. Most Excel-DNA features seem to work, including the COM-based features like RTD-based functions, ribbon and CTP extensions. However, there has been very limited testing and you should consider the .NET 6 support as an early preview.\\n\\nUpdate the TargetFramework tag in an SDK-style project file to the .NET 6 (Windows) target:\\n\\n```xml\\n    <TargetFramework>net6.0-windows</TargetFramework>\\n```\\n\\nor build for both .NET Framework and .NET 6, which allows you to test both targets:\\n\\n```xml\\n    <TargetFrameworks>net472;net6.0-windows</TargetFrameworks>\\n```\\n\\nEnd users of the add-in will need to have the .NET 6 runtime installed. (To include the runtime files as part of the add-in will not be supported, but an installer program might check and install the runtime.)\\n\\nA hard limitation of the .NET core series of runtimes (.NET 5 / 6 / 7 etc.) is that only one version of a .NET core runtime can be loaded into a specific process. The core runtime can still be loaded concurrently with a .NET Framework runtime (e.g. .NET Framework 4.8), although this is not a configuration officially supported by Microsoft. Excel-DNA will try to support add-ins targeting a .NET Framework running together with .NET 6 add-ins, but there is not planned to be any support for the future .NET 7 runtime. Fortunately .NET 6 is a \u2018Long-term Support\u2019 (LTS) release and will be formally supported until the end of 2024, so we can keep targeting .NET 6 for a few years. There is also some work on the horizon that make ahead-of-time compilation of .NET libraries (like the Excel-DNA add-ins) viable, bypassing the concurrent runtime issues. So I do expect a future path beyond .NET 6, though that is not an immediate concern.\\n\\nI look forward to bug reports, questions and other feedback about the .NET 6 support (including whether it works at all). Support for modern .NET has been a long time coming and ensures that Excel-DNA can take part in the exciting future evolution of .NET.\\n\\nAfter 16 years I am still amazed by and deeply appreciate the support and enthusiasm for Excel-DNA. Last but not least I want to thank Sergey Vlasov for his calm and consistent efforts that are now driving the project forward.\\n\\n-Govert"},{"id":"/2021/07/15/update-v1.5-sponsors-roadmap","metadata":{"permalink":"/blog/2021/07/15/update-v1.5-sponsors-roadmap","source":"@site/blog/2021-07-15-update-v1.5-sponsors-roadmap.md","title":"Update v 1.5 / Sponsors / Roadmap","description":"Excel-DNA version 1.5","date":"2021-07-15T11:49:00.000Z","formattedDate":"July 15, 2021","tags":[{"label":".NET","permalink":"/blog/tags/net"},{"label":"Excel","permalink":"/blog/tags/excel"},{"label":"ExcelDNA","permalink":"/blog/tags/excel-dna"}],"readingTime":4.025,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Update v 1.5 / Sponsors / Roadmap","date":"2021-07-15 11:49:00 -0000","authors":"govert","tags":[".NET","Excel","ExcelDNA"]},"prevItem":{"title":"Excel-DNA 1.6 \u2013 .NET 6 / PackageReference / Anti-virus","permalink":"/blog/2022/03/07/excel-dna-1.6-.net6-packagereference-anti-virus"},"nextItem":{"title":"Excel-DNA version 1.1","permalink":"/blog/2020/06/29/excel-dna-version-1.1"}},"content":"## Excel-DNA version 1.5\\n\\nA release candidate for the next version of Excel-DNA is now available for testing. Please try out this update, and let me know if you run into any problems or whether you are able to confirm that your add-in still works correctly. I expect to make a final release in a few weeks.\\n\\nThis update includes a completely new implementation of the core marshaling, replacing code that I initially wrote in 2005. I\u2019ve also done some internal refactoring to prepare for supporting the .NET 5+ generation of runtimes. Finally, a few improvements were made to improve add-in load times when many functions are registered. Improved resilience in hostile anti-virus environments were also implemented since the last release.\\n\\nModernising the marshaling code has resulted in two notable changes of the minimum requirements for using Excel-DNA.\\n\\n- Only .NET Framework versions 4.5.2 to 4.8 are supported, and\\n- Excel 2007 or newer is required, dropping support for the oldest versions of Excel.\\n\\nUPDATE NOTE:\\nIf you are updating the NuGet package on a project that currently targets an older version of .NET (e.g. .NET Framework 4.0), you should change the target framework for the project to .NET Framework 4.5.2 or later, before updating the NuGet package. Otherwise you may get one of the following problems:\\n\\n- The package install script may not run when the new package is installed. This leaves the project with a file called \u201c_UNINSTALLED_xxxxx-AddIn.dna\u201d. In this case, uninstall the ExcelDna.AddIn package, update the project target framework, and then reinstall. You might need to restart Visual Studio to complete the package updates.\\n- Error messages stating \u201cError CS0246 \u2013 The type or namespace name \u2018ExcelDna\u2019 could not be found (are you missing a using directive or an assembly reference?)\u201d. This also indicates that the target framework is not supported and should be updated, after which the errors should be resolved.\\n\\nApart from the new minimum requirements, the new release is a highly compatible update and you should not expect any issues or significant behaviour changes after updating.\\n\\nThank you to @ittegrat and @augustoproiete for their contributions to this version.\\n\\nThe following prerelease packages are available on NuGet:\\n\\n- ExcelDna.AddIn.1.5.0-rc1\\n- ExcelDna.Integration.1.5.0-rc1\\n- ExcelDna.IntelliSense.1.5.0-rc1\\n- ExcelDna.Registration.1.5.0-rc1\\n- ExcelDna.Registration.VisualBasic.1.5.0-rc1\\n- ExcelDna.Registration.FSharp.1.5.0-rc1\\n\\n## GitHub Sponsors\\n\\nExcel-DNA is now registered on the [GitHub sponsors](https://github.com/sponsors/Excel-DNA) program. This lets you sponsor future Excel-DNA development, and also gives access to direct support for your Excel-DNA projects.\\nBilling for the monthly sponsorship is through your GitHub account, making it easy to add sponsorship of open-source projects to a corporate GitHub account.\\n\\nIf you are using Excel-DNA and would like to see further development and ongoing support, please sign up as a sponsor.\\nA big thank you to those users who were the first to do so: @PierreYvesR, @terryaney, @mhouldsworth @KoosBusters and one private sponsor.\\n\\nI\u2019ve set up three levels of monthly sponsorship subscriptions:\\n\\n- Individual \u2013 $14 pm. For power users and developers making add-ins for personal or limited use.\\n- Team \u2013 $170 pm. For smaller development teams in a company, those publishing add-ins externally or using more advanced add-in features.\\n- Corporate \u2013 $850 pm. For larger companies with mission critical applications or multiple development teams.\\n\\nFor the Team and Corporate sponsorship levels I am also available for some monthly direct support sessions to help deal with problems or advise on your add-in projects.\\n\\nThe direct corporate support contracts are available as before, with bespoke agreements and extensive direct support.\\nThank you very much to the existing corporate partners who have supported Excel-DNA over the past decade and continue to ensure the project\u2019s viability.\\n\\n## Roadmap\\n\\nThe development work for Excel-DNA will next address two areas:\\n\\n- Improved support for SDK-style project files and a PackageReference import of the main NuGet package. The newer .NET project templates and build tools are based on the SDK-style project files, so updating to support these even when targeting .NET Framework will be a big step forward. The main hurdle so far has been the install script and build tasks which depend on the older packages.config style NuGet implementation.\\n- Support for the .NET 5+ generation of runtimes. I\u2019ve made some progress towards the new add-in hosting code required for loading the .NET 5+ runtime, but getting to an implementation that can be supported for the future and work together with existing add-ins still needs a lot of work. The .NET 5+ runtime versions have more limited isolation capabilities, and different versions cannot be loaded side-by-side in the process. This might require us to standardise on a specific version like the .NET 6 Long Term Support release as the single supported .NET 5+ runtime target.\\n\\nThank you for your ongoing enthusiasm for Excel-DNA and the super-power combination of .NET and Excel. I look forward to your thoughts and feedback.\\n\\n-Govert"},{"id":"/2020/06/29/excel-dna-version-1.1","metadata":{"permalink":"/blog/2020/06/29/excel-dna-version-1.1","source":"@site/blog/2020-06-29-excel-dna-version-1.1.md","title":"Excel-DNA version 1.1","description":"Excel-DNA version 1.1 is now available on NuGet and as a direct download from GitHub. The easiest way to install is with Visual Studio\u2019s NuGet package manager (package ExcelDna.AddIn) \u2013 a \u2018ReadMe\u2019 file with further instructions will then be displayed. From the Package Manager Console:","date":"2020-06-29T18:53:00.000Z","formattedDate":"June 29, 2020","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":0.945,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA version 1.1","date":"2020-06-29 18:53:00 -0000","authors":"govert","tags":["release"]},"prevItem":{"title":"Update v 1.5 / Sponsors / Roadmap","permalink":"/blog/2021/07/15/update-v1.5-sponsors-roadmap"},"nextItem":{"title":"Getting started (or: Why Are You Still Using VBA?)","permalink":"/blog/2019/08/11/getting-started-or-why-are-you-still-using-vba"}},"content":"Excel-DNA version 1.1 is now available on [NuGet](https://www.nuget.org/packages/ExcelDna.AddIn/) and as a direct [download from GitHub](https://github.com/Excel-DNA/ExcelDna/releases). The easiest way to install is with Visual Studio\u2019s NuGet package manager (package ExcelDna.AddIn) \u2013 a \u2018ReadMe\u2019 file with further instructions will then be displayed. From the Package Manager Console:\\n\\n```\\nInstall-Package ExcelDna.AddIn\\n```\\n\\nExcel-DNA 1.1 is expected to be the final version to support older .NET (<4.5) and Excel (<2007) releases.\\n\\nExcel-DNA version 1.1 implements workarounds for two recent changes in Excel behaviour:\\n\\n- RTD servers based on ExcelRtdServer, and streaming functions based on IExcelObservable stopped updating after recent (early 2020) Excel updates.\\n- When loaded into an elevated Excel process (running As Administrator) the on-demand COM registration (used for ribbon and CTP loading) started failing (mid 2020).\\n\\nThe update also introduces strong-naming of the Excel-DNA assemblies (thanks to @augustoproiete)\\n\\nPlease post any issues you run into to the Google group (https://groups.google.com/forum/#!forum/exceldna)\\n\\nTo make a donation to the project, or to arrange for a corporate support agreement that lets you steer the future of Excel-DNA, please visit the [Excel-DNA Support](/#support) page.\\n\\nThank you for your continued support and enthusiasm towards the Excel-DNA project!"},{"id":"/2019/08/11/getting-started-or-why-are-you-still-using-vba","metadata":{"permalink":"/blog/2019/08/11/getting-started-or-why-are-you-still-using-vba","source":"@site/blog/2019-08-11-getting-started-or-why-are-you-still-using-vba.md","title":"Getting started (or: Why Are You Still Using VBA?)","description":"I discovered a really nice write-up on \u201cExcel-DNA Or Why Are You Still Using VBA?\u201d by Efrem J. Sternbach. He gives a succinct one-page introduction to various Excel-DNA features including the ribbon integration and COM interop. A great start if you\u2019re curious about Excel-DNA and still using VBA :-)","date":"2019-08-11T19:57:00.000Z","formattedDate":"August 11, 2019","tags":[],"readingTime":0.245,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Getting started (or: Why Are You Still Using VBA?)","date":"2019-08-11 19:57:00 -0000","authors":"govert"},"prevItem":{"title":"Excel-DNA version 1.1","permalink":"/blog/2020/06/29/excel-dna-version-1.1"},"nextItem":{"title":"Excel-DNA version 1.0","permalink":"/blog/2019/03/17/excel-dna-version-1.0"}},"content":"I discovered a really nice write-up on \u201c**[Excel-DNA Or Why Are You Still Using VBA?](https://medium.com/@efrem.sternbach/excel-dna-or-why-are-you-still-using-vba-a76f565884ff)**\u201d by **Efrem J. Sternbach**. He gives a succinct one-page introduction to various Excel-DNA features including the ribbon integration and COM interop. A great start if you\u2019re curious about Excel-DNA and still using VBA :-)"},{"id":"/2019/03/17/excel-dna-version-1.0","metadata":{"permalink":"/blog/2019/03/17/excel-dna-version-1.0","source":"@site/blog/2019-03-17-excel-dna-version-1.0.md","title":"Excel-DNA version 1.0","description":"Excel-DNA version 1.0 is now available on NuGet and as a direct download from GitHub. The easiest way to install is with Visual Studio\u2019s NuGet package manager (package ExcelDna.AddIn) \u2013 a \u2018ReadMe\u2019 file with further instructions will then be displayed. From the Package Manager Console:","date":"2019-03-17T21:08:00.000Z","formattedDate":"March 17, 2019","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":1.2,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA version 1.0","date":"2019-03-17 21:08:00 -0000","authors":"govert","tags":["release"]},"prevItem":{"title":"Getting started (or: Why Are You Still Using VBA?)","permalink":"/blog/2019/08/11/getting-started-or-why-are-you-still-using-vba"},"nextItem":{"title":"Develop Excel Conference \u2013 London, 18 October 2018","permalink":"/blog/2018/09/21/develop-excel-conference"}},"content":"Excel-DNA version 1.0 is now available on [NuGet](https://www.nuget.org/packages/ExcelDna.AddIn/) and as a direct [download from GitHub](https://github.com/Excel-DNA/ExcelDna/releases). The easiest way to install is with Visual Studio\u2019s NuGet package manager (package ExcelDna.AddIn) \u2013 a \u2018ReadMe\u2019 file with further instructions will then be displayed. From the Package Manager Console:\\n\\n```\\nInstall-Package ExcelDna.AddIn\\n```\\n\\nThe Excel-DNA 1.0.x series (this version with minor fixes) will be the final version to support older .NET (<4.0) and Excel (<2007) releases.\\n\\nVersion 1.0 is essentially the same as the long-overdue version 0.35. The update includes a number of bug fixes as well as improvements to the build-time Visual Studio integration:\\n\\n- Improve build tasks \u2013 more reliable clean-up and debugger detection\\n- Improve RTD and async QueueAsMacro reliability\\n- Improve install process of ExcelDna.AddIn NuGet package (now requires NuGet 2.5) (thanks to @caioproiete)\\n- Change how ExcelDnaUtil.Application works in Protected View \u2013 try harder but don\u2019t cache\\n- Call UnhandledExceptionHandler for macros (ExcelCommands) too\\n- Add XML schema for .dna file (thanks to @caioproiete)\\n- Add option to pack .pdb files (thanks to @lanfeust69)\\n- Fix exception handling from native async functions (thanks to @ittegrat)\\n\\nPlease post any issues you run into to the Google group (https://groups.google.com/forum/#!forum/exceldna)\\n\\n------\\n\\nTo make a donation to the project, or to arrange for a corporate support agreement that lets you influence the future of Excel-DNA, please visit the [Excel-DNA Support](https://excel-dna.net/support/) page.\\n\\nThank you for your continued support and enthusiasm towards the Excel-DNA project!"},{"id":"/2018/09/21/develop-excel-conference","metadata":{"permalink":"/blog/2018/09/21/develop-excel-conference","source":"@site/blog/2018-09-21-develop-excel-conference.md","title":"Develop Excel Conference \u2013 London, 18 October 2018","description":"Charles Williams of FastExcel fame is hosting a one-day conference in","date":"2018-09-21T09:05:00.000Z","formattedDate":"September 21, 2018","tags":[],"readingTime":0.445,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Develop Excel Conference \u2013 London, 18 October 2018","date":"2018-09-21 09:05:00 -0000","authors":"govert"},"prevItem":{"title":"Excel-DNA version 1.0","permalink":"/blog/2019/03/17/excel-dna-version-1.0"},"nextItem":{"title":"Excel-DNA version 0.34","permalink":"/blog/2017/05/31/excel-dna-0-34-final-testing"}},"content":"Charles Williams of [FastExcel](https://fastexcel.wordpress.com/) fame is hosting a one-day conference in\\nLondon on 18 October, covering a wide range of Excel extensibility topics.\\n\\nI will be presenting Excel-DNA, joining developers responsible for PyXLL,\\nPlanatech XLL+, the new Javascript interfaces from Microsoft, and more.\\nAnyone interested in advanced Excel extensibility will get great insights\\ninto the present and future of developing Excel-based solutions.\\nPlease join us!\\n\\nThis is a community organized pay-if-you-can event, with contributions helping to defer speakers\u2019 travel expenses.\\n\\nFind all the details and registration info at:\\n<https://developexcel.wordpress.com>"},{"id":"/2017/05/31/excel-dna-0-34-final-testing","metadata":{"permalink":"/blog/2017/05/31/excel-dna-0-34-final-testing","source":"@site/blog/2017-05-31-excel-dna-0-34-final-testing.md","title":"Excel-DNA version 0.34","description":"Excel-DNA version 0.34 has been released and is now available.","date":"2017-05-31T01:12:00.000Z","formattedDate":"May 31, 2017","tags":[],"readingTime":1.52,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA version 0.34","date":"2017-05-31 01:12:00 -0000","authors":"govert"},"prevItem":{"title":"Develop Excel Conference \u2013 London, 18 October 2018","permalink":"/blog/2018/09/21/develop-excel-conference"},"nextItem":{"title":"Excel UDF IntelliSense for Excel-DNA and VBA","permalink":"/blog/2016/11/24/excel-udf-intellisense-for-excel-dna-and-vba"}},"content":"Excel-DNA version 0.34 has been released and is now available.\\n\\n* on NuGet (as package ExcelDna.Addin 0.34.6), and\\n* as a standalone download from GitHub ([https://github.com/Excel-DNA/ExcelDna/releases/tag/v0.34.6][release-v0-34-6]).\\n\\nPlease post any issues you run into to the Google group ([https://groups.google.com/forum/#!forum/exceldna][exceldna-google-group])\\n\\nThe easiest way to test the new version is by installing (or upgrading to) the `ExcelDna.AddIn` NuGet package.\\n\\n---\\n\\nExcel-DNA version 0.34 introduces a much improved build procedure for add-ins created using the NuGet package (thanks to a fantastic work by [@caioproiete][caioproiete]!)\\n\\nThis replaces the error-prone post-build steps we had with a custom build helper and allows easier build output customization (see [https://github.com/Excel-DNA/ExcelDna/wiki/Build-Output-Customization][build-customization]).\\n\\nVarious bug fixes and smaller improvements are also included in this version:\\n* Add `ExplicitExports=\\"false\\"` to NuGet .dna file template\\n* Fix getting `Application` from `ProtectedViewWindow`\\n* Add attempts to get `Application` object from all windows of class `EXCEL7`.\\n* Fix `ExcelAsyncUtil.Observe` re-open restart - broken by other fixes in the previous version. Add option to not restart.\\n* Change `ExcelRtdServer.ConnectData` to be more careful about raising an update notice. Calls to `Topic.UpdateNotify` during the `ConnectData` overload are now always ignored. If the topic value is updated (through `Topic.UpdateValue`) during ConnectData, and the same value is returned from ConnectData, then no spurious `UpdateNotify` is raised. If the value returned from `ConnectData` differs from `Topic.Value`, `UpdateNotify` will still be raised.\\n* Allow `AccessViolation` exceptions to be caught under .NET 4.0 - change marshaling wrapper from `DynamicMethod` to `MethodBuilder`.\\n* Fix `QueueAsMacro` failure after paste live preview.\\n* Fix `AssemblyResolve` re-entrancy race condition.\\n\\n---\\n\\nTo make a donation to the project, or to arrange for a corporate support agreement that lets you ensure Excel-DNA will live on, please visit the [Excel-DNA Support][exceldna-support] page.\\n\\nThank you for your continued support and enthusiasm towards the Excel-DNA project!\\n\\n[release-v0-34-6]: https://github.com/Excel-DNA/ExcelDna/releases/tag/v0.34.6\\n[exceldna-google-group]: https://groups.google.com/forum/#!forum/exceldna\\n[caioproiete]: https://github.com/caioproiete\\n[build-customization]: https://github.com/Excel-DNA/ExcelDna/wiki/Build-Output-Customization\\n[exceldna-support]: /#support"},{"id":"/2016/11/24/excel-udf-intellisense-for-excel-dna-and-vba","metadata":{"permalink":"/blog/2016/11/24/excel-udf-intellisense-for-excel-dna-and-vba","source":"@site/blog/2016-11-24-excel-udf-intellisense-for-excel-dna-and-vba/index.md","title":"Excel UDF IntelliSense for Excel-DNA and VBA","description":"I\'m happy to announce the first official release of the IntelliSense extension!","date":"2016-11-24T11:44:00.000Z","formattedDate":"November 24, 2016","tags":[],"readingTime":1.71,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel UDF IntelliSense for Excel-DNA and VBA","date":"2016-11-24 11:44:00 -0000","authors":"govert"},"prevItem":{"title":"Excel-DNA version 0.34","permalink":"/blog/2017/05/31/excel-dna-0-34-final-testing"},"nextItem":{"title":"Add-in spotlight: ACQ for interpolation","permalink":"/blog/2016/06/10/add-in-spotlight-acq-for-interpolation"}},"content":"I\'m happy to announce the first official release of the IntelliSense extension!\\n\\n**Excel-DNA IntelliSense** provides on-sheet help for UDF functions as they are entered into a cell formula, similar to the help available for built-in Excel functions.\\n\\n![Intellisense Release v1 01](./intellisense-release-v1-01.png)\\n![Intellisense Release v1 02](./intellisense-release-v1-02.png)\\n\\n**For Excel-DNA add-ins** (v0.32 and later) that already provide descriptions in the `[ExcelFunction]` and `[ExcelArgument]` attributes, no extra work is needed. Just download and open (or install) the latest `ExcelDna.IntelliSense.xll` add-in from the GitHub ([https://github.com/Excel-DNA/IntelliSense/releases][intellisense-releases]), and the IntelliSense will light up. (There is also a NuGet package for embedding the service into your add-in, making distribution a bit easier.)\\n\\n**For VBA functions**, you can add an extra sheet with the IntelliSense descriptions, or add an external .xml file with the information, or embed as a the `CustomXML` part in the Workbook or `.xlam` add-in.\\nThen open (or install) the `ExcelDna.IntelliSense.xll` add-in to provide the display service. Charles Williams, of [FastExcel][fastexcel] fame, has a detailed write-up on adding IntelliSense for your VBA function - see [https://fastexcel.wordpress.com/2016/10/07/writing-efficient-vba-udfs-part-15-adding-intellisense-to-your-udfs/][intellisense-vba].\\n\\n**For PyXLL users**, the latest PyXLL 3.1 release offer built-in support for IntelliSense with the ExcelDna.IntelliSense.xll add-in installed. See [https://enthought.pyxll.com/whatsnew.html#intellisense][intellisense-pyxll].\\n\\nOther native .xll add-ins can also provide IntelliSense through an external .xml file.\\n\\nDetails and downloads are on GitHub:\\n* Home: [https://github.com/Excel-DNA/IntelliSense][intellisense-repo]\\n* Releases: [https://github.com/Excel-DNA/IntelliSense/releases][intellisense-releases]\\n* Getting Started: [https://github.com/Excel-DNA/IntelliSense/wiki/Getting-Started][intellisense-getting-started]\\n* Detailed Usage Instructions: [https://github.com/Excel-DNA/IntelliSense/wiki/Usage-Instructions][intellisense-wiki] including details for incorporating the library into your own add-in for easier distribution.\\n\\n**Public support and bug reports**:\\nThe Excel-DNA Google group ([https://groups.google.com/forum/#!forum/exceldna][exceldna-google-group]) is the best place for general questions, comments etc. Detailed bug reports and feature requests can be added to the GitHub issues list: [https://github.com/Excel-DNA/IntelliSense/issues][intellisense-issues]\\n\\n**Corporate support and private donations**:\\nIf you find Excel-DNA and extensions like the IntelliSense service useful, please support the project by arranging a corporate support agreement, or making a donation via PayPal. See [https://excel-dna.net/support/][exceldna-support] for details and contact information.\\n\\n[intellisense-img1]:  /images/intellisense-release-v1-01.png \\"Intellisense Release v1 01\\"\\n[intellisense-img2]:  /images/intellisense-release-v1-02.png \\"Intellisense Release v1 02\\"\\n[intellisense-releases]: https://github.com/Excel-DNA/IntelliSense/releases\\n[fastexcel]: http://www.decisionmodels.com/fastexcelD.htm\\n[intellisense-vba]: https://fastexcel.wordpress.com/2016/10/07/writing-efficient-vba-udfs-part-15-adding-intellisense-to-your-udfs/\\n[intellisense-pyxll]: https://enthought.pyxll.com/whatsnew.html#intellisense\\n[intellisense-repo]: https://github.com/Excel-DNA/IntelliSense\\n[intellisense-getting-started]: https://github.com/Excel-DNA/IntelliSense/wiki/Getting-Started\\n[intellisense-wiki]: https://github.com/Excel-DNA/IntelliSense/wiki/Usage-Instructions\\n[exceldna-google-group]: https://groups.google.com/forum/#!forum/exceldna\\n[intellisense-issues]: https://github.com/Excel-DNA/IntelliSense/issues\\n[exceldna-support]: /support/"},{"id":"/2016/06/10/add-in-spotlight-acq-for-interpolation","metadata":{"permalink":"/blog/2016/06/10/add-in-spotlight-acq-for-interpolation","source":"@site/blog/2016-06-10-add-in-spotlight-acq-for-interpolation.md","title":"Add-in spotlight: ACQ for interpolation","description":"This is the first in an occasional series of posts about interesting Excel-DNA based add-ins.","date":"2016-06-10T21:23:00.000Z","formattedDate":"June 10, 2016","tags":[],"readingTime":1.065,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Add-in spotlight: ACQ for interpolation","date":"2016-06-10 21:23:00 -0000","authors":"govert"},"prevItem":{"title":"Excel UDF IntelliSense for Excel-DNA and VBA","permalink":"/blog/2016/11/24/excel-udf-intellisense-for-excel-dna-and-vba"},"nextItem":{"title":"Excel-DNA version 0.33.8-rc2 available","permalink":"/blog/2015/09/03/excel-dna-version-0-33-8-rc2-available"}},"content":"This is the first in an occasional series of posts about interesting Excel-DNA based add-ins.\\n\\nAlex Chirokov\'s **ACQ** add-in provides a library of interpolation routines for Excel. The add-in includes 1D and 2D interpolators, scatter plot smoothing and a Mersenne Twister random number generator.\\n\\nTo have a closer look:\\n\\n* Find the current release on GitHub: [https://github.com/ratesquant/ACQ/releases][acq-releases]\\n* With the main repository on GitHub at [https://github.com/ratesquant/ACQ][acq-repo]\\n* A very clear introduction to the library, including some of it\'s advanced features, is posted on Code Project: [http://www.codeproject.com/Articles/1097174/Interpolation-in-Excel-using-Excel-DNA][interpolation-article]\\n\\nFeatures I like about the add-in (apart from it using Excel-DNA) include:\\n\\n* A liberal open-source license\\n* A clear and authoritative implementation of a particular domain\\n* Very nice example of using object handles - an interpolator is build from the data, and then used to interpolate many values. ACQ has a clean implementation and great example of this technique.\\n* All the functions have a common prefix (\\"`=acq`...\\"), making them easy to find in the function list, and use with the Excel-DNA IntelliSense extension.\\n\\nThank you for publishing a great add-in, Alex.\\n\\nPS: ACQ has a bonus feature that implements a Sudoku solver (and generator)! See the write-up here: [Sudoku Solver in Excel using C# and Excel-DNA][sudoku-solver-article].\\n\\n[acq-releases]: https://github.com/ratesquant/ACQ/releases\\n[acq-repo]: https://github.com/ratesquant/ACQ\\n[interpolation-article]: http://www.codeproject.com/Articles/1097174/Interpolation-in-Excel-using-Excel-DNA\\n[sudoku-solver-article]: http://www.codeproject.com/Articles/1098156/Sudoku-Solver-in-Excel-using-Csharp-and-Excel-DNA"},{"id":"/2015/09/03/excel-dna-version-0-33-8-rc2-available","metadata":{"permalink":"/blog/2015/09/03/excel-dna-version-0-33-8-rc2-available","source":"@site/blog/2015-09-03-excel-dna-version-0-33-8-rc2-available.md","title":"Excel-DNA version 0.33.8-rc2 available","description":"I\'ve made an updated release candidate available - this is version 0.33.8-RC2.","date":"2015-09-03T17:25:39.000Z","formattedDate":"September 3, 2015","tags":[],"readingTime":0.99,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA version 0.33.8-rc2 available","date":"2015-09-03 17:25:39 -0000","authors":"govert"},"prevItem":{"title":"Add-in spotlight: ACQ for interpolation","permalink":"/blog/2016/06/10/add-in-spotlight-acq-for-interpolation"},"nextItem":{"title":"Excel-DNA 0.33 Release Candidate and License Change","permalink":"/blog/2015/08/03/excel-dna-0-33-release-candidate-and-license-change"}},"content":"I\'ve made an updated release candidate available - this is version 0.33.8-RC2.\\n\\nIn this update:\\n\\n* Excel-DNA is (again) licensed under the [zlib license][license] (thanks to [Chel][post-license-issue] for raising the potential ambiguity in the MIT license).\\n\\n* There are improvements in the NuGet install scripts (thanks to [Caio Proiete][caioproiete] for the encouragement and help with this).\\n\\n* There are some minor fixes, including the `XlCall` fix for the error: \\"_Cannot Inherit from sealed class XlCall_\\"\\n\\n* The VC++ native project was updated to use the VS 2013 tools (allowing the project to build with the AppVeyor continuous integration service).\\n\\nThe update can be installed by:\\n\\n* Updating the Excel-DNA NuGet package to pre-release version 0.33.8-rc2\\n\\n* Installing the new (pre-release) `ExcelDna.AddIn` package version 0.33.8-rc2\\n\\n* Downloading the binary (and source) distribution from CodePlex ([https://exceldna.codeplex.com/releases/view/616591][release-v0-33-8-rc2]).\\n\\n**Please help me test this update!**\\n\\n**You can notify me of any problems or questions you encounter, either through the [Google group][exceldna-google-group] or directly via email to <govert@dnakode.com>**.\\n\\n**Please also confirm if it works!**\\n**What Windows and Excel version, and what features do you use?**\\n\\n---\\n\\nThank you for your continued support of Excel-DNA.\\n\\n[license]: https://github.com/Excel-DNA/ExcelDna/blob/master/LICENSE.txt\\n[post-license-issue]: https://groups.google.com/forum/#!topic/exceldna/CRsJrQ6mJTo\\n[caioproiete]: https://github.com/caioproiete\\n[release-v0-33-8-rc2]: https://exceldna.codeplex.com/releases/view/616591\\n[exceldna-google-group]: https://groups.google.com/forum/#!forum/exceldna"},{"id":"/2015/08/03/excel-dna-0-33-release-candidate-and-license-change","metadata":{"permalink":"/blog/2015/08/03/excel-dna-0-33-release-candidate-and-license-change","source":"@site/blog/2015-08-03-excel-dna-0-33-release-candidate-and-license-change.md","title":"Excel-DNA 0.33 Release Candidate and License Change","description":"Version 0.33 Release Candidate","date":"2015-08-03T00:50:00.000Z","formattedDate":"August 3, 2015","tags":[],"readingTime":2.385,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA 0.33 Release Candidate and License Change","date":"2015-08-03 00:50:00 -0000","authors":"govert"},"prevItem":{"title":"Excel-DNA version 0.33.8-rc2 available","permalink":"/blog/2015/09/03/excel-dna-version-0-33-8-rc2-available"},"nextItem":{"title":"Excel-DNA 0.32 Released","permalink":"/blog/2014/05/04/excel-dna-0-32-released"}},"content":"## Version 0.33 Release Candidate\\n\\nExcel-DNA 0.33 contains a number of bug fixes and improvements, including a [diagnostic logging][diagnostic-logging] approach based on the .NET Trace classes. More details can be found in the current [ChangeLog][changelog].\\n\\nThis version will also be the foundation for a first release of the custom Registration extension and the ongoing work towards on-sheet IntelliSense for user-defined functions.\\n\\nA release candidate for the new version is available\\n\\n* as a [GitHub release][github-release];\\n* as a [CodePlex download][codeplex-release];\\n* and in the (pre-release) [ExcelDna.AddIn NuGet package][addin-nupkg].\\n\\nPlease help me test that the new version works correctly in the many different ways, Excel and Windows versions, and languages where Excel-DNA add-ins run.\\n\\nIf you run into any unexpected behavior bugs or regressions, please post to the [Google group][excel-dna-group] or contact me directly.\\n\\nAlso, if you are able to confirm that the new version works in a particular setting, please post that too. Details about what functionality you\'ve tested and what operating environment (including .NET and Excel version) you are running with, would help me a lot.\\n\\n\\n## License Change\\n\\n~~For the Excel-DNA project, I\'ve changed to the standard [MIT license][mit-license]. This has become the most common open-source license aligned with my intention of making Excel-DNA free for all use, including commercial use~~. **UPDATE 2015-09-03**: Excel-DNA is (again) licensed under the [zlib license][license]. More details [here][post-v0-33-8-rc2].\\n\\nIf you have any concerns with this change, please let me know.\\n\\n\\n## NuGet Packages\\n\\nWith this version, I am re-aligning the Excel-DNA package names on NuGet with the assembly names and standard naming conventions. The main packages for this release will be:\\n\\n* **[ExcelDna.AddIn][addin-nupkg]** - Includes the `.xll` and creates a complete add-in when installed into a Class Library project. This is update of the \\"Excel-DNA\\" package.\\n\\n* **[ExcelDna.Integration][integration-nupkg]** - Contains only the integration reference library, suitable for referencing in third-party libraries that are intended to be used in Excel-DNA add-ins. An update of the \\"Excel-DNA.Lib\\" package.\\n\\nThe old packages will be updated to refer to the new ones as dependencies, which should allow package updates to work correctly.\\n\\n\\n## GitHub\\n\\nThe Excel-DNA project is (slowly) moving to [GitHub][exceldna-github-home].\\n\\n* The core library project can be found at [https://github.com/Excel-DNA/ExcelDna][exceldna-github-repo], where the latest source versions are hosted.\\n* The best documentation and links to related projects and other source is still found on the old [CodePlex site][exceldna-codeplex].\\n* For general questions and discussion about Excel-DNA, please continue use the [Excel-DNA Google group][excel-dna-group].\\n* Specific issues, bug reports and feature requests can be added to the [GitHub Issues][exceldna-github-issues] list.\\n* For a permanent bookmark to the project, please use the Excel-DNA home page at [http://excel-dna.net](/).\\n\\n---\\n\\nThank you for your continued support of Excel-DNA!\\n\\n[diagnostic-logging]: https://github.com/Excel-DNA/ExcelDna/wiki/Diagnostic-Logging\\n[changelog]: https://github.com/Excel-DNA/ExcelDna/blob/master/Distribution/ChangeLog.txt\\n[github-release]: https://github.com/Excel-DNA/ExcelDna/releases/tag/v0.33.7-rc1\\n[codeplex-release]: https://exceldna.codeplex.com/releases/view/616591\\n[addin-nupkg]: https://www.nuget.org/packages/ExcelDna.AddIn/\\n[excel-dna-group]: https://groups.google.com/forum/#!forum/exceldna\\n[license]: https://github.com/Excel-DNA/ExcelDna/blob/master/LICENSE.txt\\n[post-v0-33-8-rc2]: /2015/09/03/excel-dna-version-0-33-8-rc2-available/\\n[mit-license]: https://github.com/Excel-DNA/ExcelDna/blob/master/LICENSE.txt\\n[exceldna-github-home]: https://github.com/Excel-DNA\\n[exceldna-github-repo]: https://github.com/Excel-DNA/ExcelDna/\\n[exceldna-codeplex]: https://exceldna.codeplex.com\\n[exceldna-github-issues]: https://github.com/Excel-DNA/ExcelDna/issues/\\n[integration-nupkg]: https://www.nuget.org/packages/ExcelDna.Integration/"},{"id":"/2014/05/04/excel-dna-0-32-released","metadata":{"permalink":"/blog/2014/05/04/excel-dna-0-32-released","source":"@site/blog/2014-05-04-excel-dna-0-32-released.md","title":"Excel-DNA 0.32 Released","description":"I\'ve posted a final release of Excel-DNA version 0.32 to CodePlex (https//www.nuget.org/packages/Excel-DNA).","date":"2014-05-04T15:46:00.000Z","formattedDate":"May 4, 2014","tags":[{"label":"release","permalink":"/blog/tags/release"}],"readingTime":1.135,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA 0.32 Released","date":"2014-05-04 15:46:00 -0000","authors":"govert","tags":["release"]},"prevItem":{"title":"Excel-DNA 0.33 Release Candidate and License Change","permalink":"/blog/2015/08/03/excel-dna-0-33-release-candidate-and-license-change"},"nextItem":{"title":"Excel-DNA 0.32 - Breaking changes to integer and boolean parameter handling","permalink":"/blog/2014/05/03/excel-dna-0-32-breaking-changes-to-integer-and-boolean-parameter-handling"}},"content":"I\'ve posted a final release of Excel-DNA version 0.32 to CodePlex ([https://exceldna.codeplex.com/releases/view/119190][exceldna-v0-32]) and the NuGet package repository ([https://www.nuget.org/packages/Excel-DNA][exceldna-nuget]).\\n\\nExcel-DNA 0.32 consolidates a large number of bug fixes and improvements that have accumulated over the last year. In particular, a number of edge cases that affect Excel-DNA add-ins under Excel 2013 have been addressed.\\n\\nNative asynchronous functions, available under Excel 2010 and later, are now supported. Runtime registration of delegate functions and external retrieval of registration details will allow development of extension features without requiring changes to the Excel-DNA core runtime - see the ExcelDna.CustomRegistration project for examples of the dynamic registration: [https://github.com/Excel-DNA/CustomRegistration][custom-registration]\\n\\nExcel-DNA 0.32 introduces one breaking change: integer parameter conversions are modified to be consistent with VBA. Fractional values passed to functions with integer parameters are converted using the round-to-even convention - as is the case for VBA functions. This issue is discussed in more detail at [http://excel-dna.net/2014/05/03/excel-dna-0-32-breaking-changes-to-integer-and-boolean-parameter-handling/][param-conversion]\\n\\nSee the [Distribution\\\\ChangeLog.txt][exceldna-changelog] file for a complete list of changes in this version.\\n\\nAs always, I greatly appreciate any feedback on this version, and on Excel-DNA in general. Any comments or questions are welcome on the Google group or by contacting me directly.\\n\\nTo ensure future development of Excel-DNA, please make a donation via PayPal or arrange for a corporate support agreement. See [http://excel-dna.net/support/][exceldna-support] for details.\\n\\n[exceldna-v0-32]: https://exceldna.codeplex.com/releases/view/119190\\n[exceldna-nuget]: https://www.nuget.org/packages/Excel-DNA\\n[custom-registration]: https://github.com/Excel-DNA/CustomRegistration\\n[param-conversion]: /2014/05/03/excel-dna-0-32-breaking-changes-to-integer-and-boolean-parameter-handling/\\n[exceldna-changelog]: https://exceldna.codeplex.com/SourceControl/latest#Distribution/ChangeLog.txt\\n[exceldna-support]: /support/"},{"id":"/2014/05/03/excel-dna-0-32-breaking-changes-to-integer-and-boolean-parameter-handling","metadata":{"permalink":"/blog/2014/05/03/excel-dna-0-32-breaking-changes-to-integer-and-boolean-parameter-handling","source":"@site/blog/2014-05-03-excel-dna-0-32-breaking-changes-to-integer-and-boolean-parameter-handling/index.md","title":"Excel-DNA 0.32 - Breaking changes to integer and boolean parameter handling","description":"Excel-DNA version 0.32 introduces some changes in the parameter conversions applied to integer and boolean parameters. These changes improve compatibility with VBA, and make it easier to provide a consistent implementation when the conversion needs to be explicitly implemented, as for some generated methods.","date":"2014-05-03T07:08:00.000Z","formattedDate":"May 3, 2014","tags":[{"label":"0.32","permalink":"/blog/tags/0-32"},{"label":"conversions","permalink":"/blog/tags/conversions"}],"readingTime":1.925,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA 0.32 - Breaking changes to integer and boolean parameter handling","date":"2014-05-03 07:08:00 -0000","authors":"govert","tags":["0.32","conversions"]},"prevItem":{"title":"Excel-DNA 0.32 Released","permalink":"/blog/2014/05/04/excel-dna-0-32-released"},"nextItem":{"title":"Tutorial: COM server support for VBA integration","permalink":"/blog/2014/03/21/tutorial-com-server-support-for-vba-integration"}},"content":"Excel-DNA version 0.32 introduces some changes in the parameter conversions applied to integer and boolean parameters. These changes improve compatibility with VBA, and make it easier to provide a consistent implementation when the conversion needs to be explicitly implemented, as for some generated methods.\\n\\nIn Excel-DNA versions before 0.32, UDF functions taking integer and boolean parameters were registered with the C API using the respective types, and hence the conversions were performed by Excel before calling the UDF. In Excel-DNA 0.32, these conversions are performed by Excel-DNA, with the changes discussed here. Affected functions would previously have behaved consistent with `.xll` add-ins made with C/C++, where registered with integer or boolean parameter types.\\n\\nThe new behaviour for integer conversions is that double values passed from Excel to integer parameters in UDFs are converted using the \\"Round-To-Even\\" midpoint rounding convention. Previously, positive midpoint values (like `2.5`) were rounded up (to `3`), while negative midpoint values were rounded down (`-2.5` to `-3`), with the exception that `-0.5` was rounded to `0`. `Int64` (`long`) parameters are now also handled consistently.\\n\\nOne exception to the VBA compatibility guideline is that incoming boolean `true` values passed to integer parameters are converted to `1`, rather than `-1` as would be the case with VBA. For this case I consider it more important to be consistent with .NET conventions, whereby boolean `true` values are represented by `1`.\\n\\nFor conversions to boolean parameters, the main change is in how fractional values are converted to booleans. The new version is consistent with VBA - any non-zero value is converted to `true`.\\n\\nI hope you will agree that the improved consistency is worth making these breaking changes, and that the decision will not cause any unexpected problems. As always, I appreciate any feedback, either directly or via the [Excel-DNA Google group][excel-dna-group].\\n\\n---\\nThe following snapshot gives a good summary of the changes:\\n\\n![Param Conversion Table Changes](./param-conversion-changes-v0-32.png)\\n\\nThe functions used are as follows:\\n\\n```csharp\\npublic static object dnaConvertInt32(int value)\\n{\\n    return value;\\n}\\n```\\n\\n```vb\\nFunction VbaConvertInteger(value As Integer)\\n    VbaConvertInteger = value\\nEnd Function\\n```\\n\\n```csharp\\npublic static object dnaConvertInt64(long value)\\n{\\n    return value;\\n}\\n```\\n\\n```csharp\\npublic static object dnaConvertBoolean(bool value)\\n{\\n    return value;\\n}\\n```\\n\\n```vb\\nFunction VbaConvertBoolean(value As Boolean)\\n    VbaConvertBoolean = value\\nEnd Function\\n```\\n\\n[excel-dna-group]: http://groups.google.com/group/exceldna\\n[conversion-table-img]: /images/param-conversion-changes-v0-32.png \\"Param Conversion Table Changes\\""},{"id":"/2014/03/21/tutorial-com-server-support-for-vba-integration","metadata":{"permalink":"/blog/2014/03/21/tutorial-com-server-support-for-vba-integration","source":"@site/blog/2014-03-21-tutorial-com-server-support-for-vba-integration.md","title":"Tutorial: COM server support for VBA integration","description":"Functions and macros created in an Excel-DNA add-in can be called directly from Excel VBA by using Application.Run(...). However, .NET also supports creating rich object models that are exported as COM libraries, which can be Tools->Referenced in VBA. Excel-DNA has some advanced support to host COM-exported objects from Excel-DNA add-ins, giving some advantages over the regular .NET \\"Register for COM interop\\" hosting approach:","date":"2014-03-21T23:16:00.000Z","formattedDate":"March 21, 2014","tags":[{"label":".net","permalink":"/blog/tags/net"},{"label":"com","permalink":"/blog/tags/com"},{"label":"excel","permalink":"/blog/tags/excel"},{"label":"excel-vba","permalink":"/blog/tags/excel-vba"},{"label":"exceldna","permalink":"/blog/tags/exceldna"},{"label":"vba","permalink":"/blog/tags/vba"},{"label":"xll","permalink":"/blog/tags/xll"}],"readingTime":1.165,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Tutorial: COM server support for VBA integration","date":"2014-03-21 23:16:00 -0000","authors":"govert","tags":[".net","com","excel","excel-vba","exceldna","vba","xll"]},"prevItem":{"title":"Excel-DNA 0.32 - Breaking changes to integer and boolean parameter handling","permalink":"/blog/2014/05/03/excel-dna-0-32-breaking-changes-to-integer-and-boolean-parameter-handling"},"nextItem":{"title":"Excel-DNA 0.32 Release Candidate","permalink":"/blog/2014/03/03/excel-dna-0-32-release-candidate"}},"content":"Functions and macros created in an Excel-DNA add-in can be called directly from Excel VBA by using `Application.Run(...)`. However, .NET also supports creating rich object models that are exported as COM libraries, which can be Tools->Referenced in VBA. Excel-DNA has some advanced support to host COM-exported objects from Excel-DNA add-ins, giving some advantages over the regular .NET \\"Register for COM interop\\" hosting approach:\\n\\n* COM objects that are created via the Excel-DNA COM server support will be active in the same AppDomain as the rest of the add-in, allowing direct shared access to static variables, internal caches etc.\\n\\n* COM registration for classes hosted by Excel-DNA does not require administrative access (even when registered via `RegSvr32.exe`).\\n\\n* Everything needed for the COM server can be packed in a single-file .xll add-in, including the type library used for IntelliSense support in VBA.\\n\\n[Mikael Katajam\xe4ki][mikael-katajamaki] has written some detailed tutorial posts on his [Excel in Finance][mikael-katajamaki] blog that explore this Excel-DNA feature, with detailed explanation, step-by-step instructions, screen shots and further links. See:\\n\\n* [Interfacing C# and VBA with Excel-DNA (no intellisense support)][post-no-intellisense]\\n* [Interfacing C# and VBA with Excel-DNA (with intellisense support)][post-with-intellisense]\\n\\nNote that these techniques would work equally well with code written in VB.NET, allowing you to port VB/VBA libraries to VB.NET with Excel-DNA and then use these from VBA.\\n\\nThank you Mikael for the great write-up!\\n\\n[mikael-katajamaki]: http://mikejuniperhill.blogspot.com/\\n[post-no-intellisense]: http://mikejuniperhill.blogspot.com/2014/03/interfacing-c-and-vba-with-exceldna-no.html\\n[post-with-intellisense]: http://mikejuniperhill.blogspot.com/2014/03/interfacing-c-and-vba-with-exceldna_16.html"},{"id":"/2014/03/03/excel-dna-0-32-release-candidate","metadata":{"permalink":"/blog/2014/03/03/excel-dna-0-32-release-candidate","source":"@site/blog/2014-03-03-excel-dna-0-32-release-candidate.md","title":"Excel-DNA 0.32 Release Candidate","description":"I have posted to CodePlex (https//www.nuget.org/packages/Excel-DNA/0.32.0-rc1) a release candidate of the next Excel-DNA version.","date":"2014-03-03T23:16:00.000Z","formattedDate":"March 3, 2014","tags":[{"label":"exceldna","permalink":"/blog/tags/exceldna"},{"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":1.31,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA 0.32 Release Candidate","date":"2014-03-03 23:16:00 -0000","authors":"govert","tags":["exceldna","nuget"]},"prevItem":{"title":"Tutorial: COM server support for VBA integration","permalink":"/blog/2014/03/21/tutorial-com-server-support-for-vba-integration"},"nextItem":{"title":"Getting started with F# and Excel-DNA in finance","permalink":"/blog/2013/11/14/getting-started-with-f-and-excel-dna-in-finance"}},"content":"I have posted to CodePlex ([https://exceldna.codeplex.com/releases/view/119190][release-v0-32-pre]) and the NuGet package manager ([https://www.nuget.org/packages/Excel-DNA/0.32.0-rc1][nuget-v0-32-rc1]) a release candidate of the next Excel-DNA version.\\n\\nI hope to make a final release in the next few weeks, once I\'ve had confirmation that this version works well on the various platforms and Excel versions.\\n\\nPlease test, and let me know of any problems or surprises you run into, or confirm what features, platforms and Excel versions work correctly.\\n\\nThe CodePlex download is structured as before, and for the NuGet package manager, you can upgrade to the pre-release version with:\\n\\n```powershell\\nPM> Upgrade-Package Excel-DNA -Pre\\n```\\n\\n---\\n\\n**Excel-DNA 0.32** consolidates a large number of bug fixes and improvements that have accumulated over the last year. In particular, a number of edge cases that affect Excel-DNA add-ins under Excel 2013 have been addressed.\\n\\nNative asynchronous functions, available under Excel 2010 and later, are now supported. Runtime registration of delegate functions and external retrieval of registration details will allow development of extension features without requiring changes to the Excel-DNA core runtime.\\n\\nExcel-DNA 0.32 is compatible with version 0.30, and introduces no notable breaking changes. See the Distribution\\\\ChangeLog.txt file for a complete change list.\\n\\nAs always, I greatly appreciate any feedback on this version, and on Excel-DNA in general. Any comments or questions are welcome on the [Google group][excel-dna-group] or by contacting me directly.\\n\\n*To ensure future development of Excel-DNA, please make a donation via PayPal or arrange for a corporate support agreement. See [http://excel-dna.net/support/][excel-dna-support] for details*.\\n\\nThank you for your continued support,\\nGovert\\n\\n[release-v0-32-pre]: https://exceldna.codeplex.com/releases/view/119190\\n[nuget-v0-32-rc1]: https://www.nuget.org/packages/Excel-DNA/0.32.0-rc1\\n[excel-dna-group]: http://groups.google.com/group/exceldna\\n[excel-dna-support]: /support/"},{"id":"/2013/11/14/getting-started-with-f-and-excel-dna-in-finance","metadata":{"permalink":"/blog/2013/11/14/getting-started-with-f-and-excel-dna-in-finance","source":"@site/blog/2013-11-14-getting-started-with-f-and-excel-dna-in-finance.md","title":"Getting started with F# and Excel-DNA in finance","description":"Bram Jochems has written a friendly \\"Getting Started\\" post, discussing how to use F# with Excel-DNA in a finance context. His add-in with various F# / Excel-DNA helper utilities, and a bunch of quantitative finance-related UDFs, including option pricing function and volatility interpolation, has been published as a project on GitHub.","date":"2013-11-14T00:20:00.000Z","formattedDate":"November 14, 2013","tags":[{"label":"examples","permalink":"/blog/tags/examples"},{"label":"excel","permalink":"/blog/tags/excel"},{"label":"rtd","permalink":"/blog/tags/rtd"},{"label":"rx","permalink":"/blog/tags/rx"}],"readingTime":0.415,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Getting started with F# and Excel-DNA in finance","date":"2013-11-14 00:20:00 -0000","authors":"govert","tags":["examples","excel","rtd","rx"]},"prevItem":{"title":"Excel-DNA 0.32 Release Candidate","permalink":"/blog/2014/03/03/excel-dna-0-32-release-candidate"},"nextItem":{"title":"Streaming real-time data to Excel","permalink":"/blog/2013/10/07/streaming-real-time-data-to-excel"}},"content":"[Bram Jochems][bramjochems] has written a friendly [\\"Getting Started\\" post][getting-started], discussing how to use F# with Excel-DNA in a finance context. His add-in with various F# / Excel-DNA helper utilities, and a bunch of quantitative finance-related UDFs, including option pricing function and volatility interpolation, has been published as a [project on GitHub][myexcellib].\\n\\nIt\'s well worth a look, whether you are using F# and keen to explore Excel-DNA, or just curious about F# and looking for some practical examples.\\n\\n[bramjochems]: http://bramjochems.com\\n[getting-started]: http://bramjochems.com/blog/2013/10/example-f-exceldna/\\n[myexcellib]: https://github.com/bramjochems/MyExcelLib"},{"id":"/2013/10/07/streaming-real-time-data-to-excel","metadata":{"permalink":"/blog/2013/10/07/streaming-real-time-data-to-excel","source":"@site/blog/2013-10-07-streaming-real-time-data-to-excel.md","title":"Streaming real-time data to Excel","description":"Gert-Jan van der Kamp has posted a very nice end-to-end example on CodeProject, showing how to create a WCF service and Excel-DNA add-in to stream real-time data into Excel.","date":"2013-10-07T23:13:00.000Z","formattedDate":"October 7, 2013","tags":[{"label":"examples","permalink":"/blog/tags/examples"},{"label":"excel","permalink":"/blog/tags/excel"},{"label":"rtd","permalink":"/blog/tags/rtd"},{"label":"rx","permalink":"/blog/tags/rx"}],"readingTime":0.47,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Streaming real-time data to Excel","date":"2013-10-07 23:13:00 -0000","authors":"govert","tags":["examples","excel","rtd","rx"]},"prevItem":{"title":"Getting started with F# and Excel-DNA in finance","permalink":"/blog/2013/11/14/getting-started-with-f-and-excel-dna-in-finance"},"nextItem":{"title":"F# and R in Excel","permalink":"/blog/2013/08/05/f-and-r-in-excel"}},"content":"Gert-Jan van der Kamp has posted a very nice end-to-end example on [CodeProject][codeproject-streaming], showing how to create a WCF service and Excel-DNA add-in to stream real-time data into Excel.\\n\\nThe example uses to use the Reactive Extensions support in Excel-DNA v. 0.30 to push the data to an Excel UDF (using Excel\'s RTD mechanism behind the scenes), together with a Duplex WCF service providing the data.\\n\\nThere was also this [CodePlex discussion][codeplex-460904] about the Excel ThrottleInterval option, which trades off the real-time update frequency against stability of the Excel calculation.\\n\\n[codeproject-streaming]: http://www.codeproject.com/Articles/662009/Streaming-realtime-data-to-Excel\\n[codeplex-460904]: https://exceldna.codeplex.com/discussions/460904"},{"id":"/2013/08/05/f-and-r-in-excel","metadata":{"permalink":"/blog/2013/08/05/f-and-r-in-excel","source":"@site/blog/2013-08-05-f-and-r-in-excel.md","title":"F# and R in Excel","description":"Natallie Baikevich has posted some very pretty examples of using F# with Excel-DNA. One function uses the R type provider to easily expose a feature from an R package as an UDF in Excel. Have a look at the write-up, and the code on GitHub.","date":"2013-08-05T23:38:00.000Z","formattedDate":"August 5, 2013","tags":[{"label":"samples","permalink":"/blog/tags/samples"},{"label":"fsharp","permalink":"/blog/tags/fsharp"}],"readingTime":0.245,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"F# and R in Excel","date":"2013-08-05 23:38:00 -0000","authors":"govert","tags":["samples","fsharp"]},"prevItem":{"title":"Streaming real-time data to Excel","permalink":"/blog/2013/10/07/streaming-real-time-data-to-excel"},"nextItem":{"title":"Caching and Asynchronous Excel UDFs","permalink":"/blog/2013/04/02/caching-and-asynchronous-excel-udfs"}},"content":"Natallie Baikevich has posted some very pretty examples of using F# with Excel-DNA. One function uses the R type provider to easily expose a feature from an R package as an UDF in Excel. Have a look at the [write-up][natallie-post], and the [code on GitHub][natallie-code].\\n\\n[natallie-post]: http://luajalla.azurewebsites.net/excel-dna-three-stories/\\n[natallie-code]: https://github.com/luajalla/everything-fun/tree/master/exceldna-sample"},{"id":"/2013/04/02/caching-and-asynchronous-excel-udfs","metadata":{"permalink":"/blog/2013/04/02/caching-and-asynchronous-excel-udfs","source":"@site/blog/2013-04-02-caching-and-asynchronous-excel-udfs.md","title":"Caching and Asynchronous Excel UDFs","description":"This sample shows how the result of an Excel-DNA async UDF call can be cached using the .NET 4 MemoryCache class.","date":"2013-04-02T23:32:00.000Z","formattedDate":"April 2, 2013","tags":[{"label":"samples","permalink":"/blog/tags/samples"},{"label":"async","permalink":"/blog/tags/async"},{"label":"csharp","permalink":"/blog/tags/csharp"},{"label":"cache","permalink":"/blog/tags/cache"},{"label":"excel","permalink":"/blog/tags/excel"},{"label":"udf","permalink":"/blog/tags/udf"}],"readingTime":1.68,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Caching and Asynchronous Excel UDFs","date":"2013-04-02 23:32:00 -0000","authors":"govert","tags":["samples","async","csharp","cache","excel","udf"]},"prevItem":{"title":"F# and R in Excel","permalink":"/blog/2013/08/05/f-and-r-in-excel"},"nextItem":{"title":"Async and event-streaming Excel UDFs with F#","permalink":"/blog/2013/03/26/async-and-event-streaming-excel-udfs-with-f"}},"content":"This sample shows how the result of an Excel-DNA async UDF call can be cached using the .NET 4 MemoryCache class.\\n\\nPS: Apparently there is a bug in the memory management of the .NET MemoryCache class. See the [StackOverflow discussion][memorycache-strangeness] and the [Connect bug report][memorycache-bug]. The [SharpMemoryCache NuGet package][sharp-memory-cache] might be an alternative, though I\'ve not tried it.\\n\\n```xml\\n<DnaLibrary Name=\\"CachedAsyncSample\\" RuntimeVersion=\\"v4.0\\" Language=\\"C#\\">\\n\\n  <Reference Name=\\"System.Runtime.Caching\\" />\\n  <![CDATA[\\n    using System;\\n    using System.Threading;\\n    using System.Runtime.Caching;\\n    using ExcelDna.Integration;\\n    \\n    public static class dnaFunctions\\n    {\\n        public static object dnaCachedAsync(string input)\\n        {\\n            // First check the cache, and return immediately \\n            // if we found something.\\n            // (We also need a unique key to identify the cache item)\\n            string key = \\"dnaCachedAsync:\\" + input;\\n            ObjectCache cache = MemoryCache.Default; \\n            string cachedItem = cache[key] as string;\\n            if (cachedItem != null) \\n                return cachedItem;\\n    \\n            // Not in the cache - make the async call \\n            // to retrieve the item. (The second parameter here should identify \\n            // the function call, so would usually be an array of the input parameters, \\n            // but here we have the identifying key already.)\\n            object asyncResult = ExcelAsyncUtil.Run(\\"dnaCachedAsync\\", key, () => \\n            {\\n                // Here we fetch the data from far away....\\n                // This code will run on a ThreadPool thread.\\n    \\n                // To simulate a slow calculation or web service call,\\n                // Just sleep for a few seconds...\\n                Thread.Sleep(5000);\\n    \\n                // Then return the result\\n                return \\"The calculation with input \\" \\n                        + input + \\" completed at \\" \\n                        + DateTime.Now.ToString(\\"HH:mm:ss\\");\\n            });\\n    \\n            // Check the asyncResult to see if we\'re still busy\\n            if (asyncResult.Equals(ExcelError.ExcelErrorNA))\\n                return \\"!!! Fetching data\\";\\n    \\n            // OK, we actually got the result this time.\\n            // Add to the cache and return\\n            // (keeping the cached entry valid for 1 minute)\\n            // Note that the function won\'t recalc automatically after \\n            //    the cache expires. For this we need to go the \\n            //    RxExcel route with an IObservable.\\n            cache.Add(key, asyncResult, DateTime.Now.AddMinutes(1), null);\\n            return asyncResult;\\n        }\\n    \\n        public static string dnaTest()\\n        {\\n            return \\"Hello from CachedAsyncSample\\";\\n        }\\n    }\\n\\n  ]]>\\n</DnaLibrary>\\n```\\n\\n[memorycache-strangeness]: http://stackoverflow.com/questions/6895956/memorycache-strangeness\\n[memorycache-bug]: https://connect.microsoft.com/VisualStudio/feedback/details/806334/system-runtime-caching-memorycache-do-not-respect-memory-limits#\\n[sharp-memory-cache]: http://www.nuget.org/packages/SharpMemoryCache"},{"id":"/2013/03/26/async-and-event-streaming-excel-udfs-with-f","metadata":{"permalink":"/blog/2013/03/26/async-and-event-streaming-excel-udfs-with-f","source":"@site/blog/2013-03-26-async-and-event-streaming-excel-udfs-with-f.md","title":"Async and event-streaming Excel UDFs with F#","description":"There have been a some recent posts mentioning the asynchronous and reactive programming features in F#. Since Excel-DNA 0.30 added support for creating async and IObservable-based real-time data functions, I\'d like to show how these F# features can be nicely exposed to Excel via Excel-DNA.","date":"2013-03-26T08:18:00.000Z","formattedDate":"March 26, 2013","tags":[{"label":"features","permalink":"/blog/tags/features"},{"label":"samples","permalink":"/blog/tags/samples"},{"label":"async","permalink":"/blog/tags/async"},{"label":"excel","permalink":"/blog/tags/excel"},{"label":"exceldna","permalink":"/blog/tags/exceldna"},{"label":"fsharp","permalink":"/blog/tags/fsharp"}],"readingTime":9.14,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Async and event-streaming Excel UDFs with F#","date":"2013-03-26 08:18:00 -0000","authors":"govert","tags":["features","samples","async","excel","exceldna","fsharp"]},"prevItem":{"title":"Caching and Asynchronous Excel UDFs","permalink":"/blog/2013/04/02/caching-and-asynchronous-excel-udfs"},"nextItem":{"title":"Excel-DNA NuGet Package Updated","permalink":"/blog/2012/12/20/excel-dna-nuget-package-updated"}},"content":"There have been a some recent posts mentioning the [asynchronous][async-python] and [reactive][reactive] programming features in F#. Since Excel-DNA 0.30 added support for creating async and `IObservable`-based real-time data functions, I\'d like to show how these F# features can be nicely exposed to Excel via Excel-DNA.\\n\\n## IObservable to Excel via Excel-DNA\\n\\nExcel-DNA 0.30 allows an add-in to expose `IObservable` sources to Excel as real-time data functions. (Actually Excel-DNA defines an interface called `IExcelObservable` that matches the semantics of `IObservable<\\\\object> - this is because we still target .NET 2.0 with the core library.)\\n\\nAsynchronous function can then be implemented as an `IObservable` that returns a single value before completing. Cancellation (triggered when the user removes a real-time or async formula) is supported via the standard IDisposable mechanism.\\n\\nInternally, Excel-DNA implements a thread-safe RTD server and registers the `IObservable` as an RTD topic. So some aspects of the `IObservable` support are subject to Excel\'s RTD feature works, for example the RTD throttle interval (by default 2 seconds) will also apply to `IObservable` functions.\\n\\nThe following functions in the `ExcelDna.Integration.ExcelAsyncUtil` helper class are relevant:\\n\\n* `ExcelAsyncUtil.Initialize()` - this should be called in a macro context before any of the other features are used, typically from the `AutoOpen()` handler.\\n\\n* `ExcelAsyncUtil.Observe(...)` - registers an IExcelObservable as a real-time data function with Excel. `Subsequent OnNext()` calls will raise updates via RTD.\\n\\n* `ExcelAsyncUtil.Run(...)` - a helper method that runs a function asynchronously on a .NET threadpool thread.\\n\\nIn addition, we\'ll use\\n\\n* `ExcelObservableSource` - a delegate type for functions that return an `IExcelObservable`.\\n\\n### Some links:\\n\\n* [Async functions in C#][async-cs-samples] - has some sample functions in C#.\\n* [Reactive Extensions for Excel (RxExcel)][rx-excel] - the RxExcel class is a small wrapper that bridges the `IExcelObservable` to any implementation of `IObservable<T>`, allowing the Rx libraries to be used in Excel.\\n\\n\\n## F# helpers for async and IObservable-based events\\n\\nTo initialize the async support in Excel-DNA, we need some code like the following:\\n\\n```fsharp\\nnamespace FsAsync\\n\\nopen System\\nopen System.Threading\\nopen System.Net\\nopen Microsoft.FSharp.Control.WebExtensions\\nopen ExcelDna.Integration\\n\\n/// This class implements the IExcelAddin which allows us to initialize the ExcelAsyncUtil support.\\n/// It must not be a nested class (e.g. defined as a type inside a module) but a top-level class (inside a namespace)\\ntype FsAsyncAddIn () =\\n    interface IExcelAddIn with\\n        member this.AutoOpen ()  = \\n            ExcelAsyncUtil.Initialize ()\\n        member this.AutoClose () = ExcelAsyncUtil.Uninitialize ()\\n\\n    // define a regular Excel UDF just to show that the add-in works\\n    [<ExcelFunction(Description=\\"A test function from F#\\")>]\\n    static member fsaAddThem (x:double) (y:double) = x + y\\n```\\n\\nF# supports an asynchronous programming model via \\"async computation expressions\\". The result of an async computation expression is a value of type `Async<T>`, which we need to convert to an `IExcelObservable`. We use a standard `CancellationTokenSource` hooked up to the `IDisposable` to enable cancellation.\\n\\n```fsharp\\nmodule FsAsyncUtil =\\n\\n    /// A helper to pass an F# Async computation to Excel-DNA \\n    let excelRunAsync functionName parameters async =\\n        let obsSource =\\n            ExcelObservableSource(\\n                fun () -> \\n                { new IExcelObservable with\\n                    member __.Subscribe observer =\\n                        // make something like CancellationDisposable\\n                        let cts = new CancellationTokenSource ()\\n                        let disp = { new IDisposable with member __.Dispose () = cts.Cancel () }\\n                        // Start the async computation on this thread\\n                        Async.StartWithContinuations \\n                            (   async, \\n                                ( fun result -> \\n                                    observer.OnNext(result)\\n                                    observer.OnCompleted () ),\\n                                ( fun ex -> observer.OnError ex ),\\n                                ( fun ex ->\\n                                    observer.OnCompleted () ),\\n                                cts.Token \\n                            )\\n                        // return the disposable\\n                        disp\\n                }) \\n        ExcelAsyncUtil.Observe (functionName, parameters, obsSource)\\n```\\n\\nAnother neat feature of F# is that events are first-class types that implement `IObservable`. This means any F# event can serve as a real-time data source in an Excel formula. To bridge the F# events to the `IExcelObservable` interface is really easy, we just have the following helper:\\n\\n```fsharp\\n/// A helper to pass an F# IObservable to Excel-DNA\\nlet excelObserve functionName parameters observable = \\n    let obsSource =\\n        ExcelObservableSource(\\n            fun () -> \\n            { new IExcelObservable with\\n                member __.Subscribe observer =\\n                    // Subscribe to the F# observable\\n                    Observable.subscribe (fun value -> observer.OnNext (value)) observable\\n            })\\n    ExcelAsyncUtil.Observe (functionName, parameters, obsSource)\\n```\\n\\n\\n## Sample functions\\n\\nGiven the above helpers, we can now explore a few ways to implement async and real-time streaming functions. As examples:\\n\\nHere is a plain synchronous function to download a url into a string:\\n\\n```fsharp\\nlet downloadString url = \\n    try\\n        let uri = new System.Uri(url)\\n        let webClient = new WebClient()\\n        let html = webClient.DownloadString(uri)\\n        html\\n    with\\n        | ex -> \\"!!!ERROR: \\" + ex.Message\\n```\\n\\n* **Async implementation 1**: Use Excel-DNA async directly to run `downloadString` on a `ThreadPool` thread\\n\\n```fsharp\\nlet downloadStringAsyncRunTP1 url = \\n    ExcelAsyncUtil.Run (\\"downloadStringAsyncTP1\\", url, (fun () -> downloadString url :> obj))\\n```\\n\\nCreate an F# asynchronous computation for the download (this functions is not exported to Excel)\\n\\n```fsharp\\nlet downloadStringAsyncImpl url = async {\\n    try\\n        // In here we could check for cancellation using \\n        // let! ct = Async.CancellationToken\\n        // if ct.IsCancellationRequested then ...\\n        let uri = new System.Uri(url)\\n        let webClient = new WebClient()\\n        let! html = webClient.AsyncDownloadString(uri)\\n        return html\\n    with\\n        | ex -> return \\"!!!ERROR: \\" + ex.Message \\n    }\\n```\\n\\n* **Async implementation 2**: This function runs the async computation synchronously on a `ThreadPool` thread because that\'s what `ExcelAsyncUtil.Run` does. Blocking calls will block a `ThreadPool` thread, eventually limiting the concurrency of the async calls\\n\\n```fsharp\\nlet downloadStringAsyncTP2 url = \\n    ExcelAsyncUtil.Run (\\"downloadStringAsyncTP2\\", url, (fun () -> Async.RunSynchronously (downloadStringAsyncImpl url) :> obj))\\n```\\n\\n* **Async implementation 3**: Use the helper we defined above. This runs the async computation using true F# async. Should not block `ThreadPool` threads, and allows cancellation\\n\\n```fsharp\\nlet downloadStringAsync url = \\n    FsAsyncUtil.excelRunAsync \\"downloadStringAsync\\" url (downloadStringAsyncImpl url)\\n```\\n\\nHelper that will create a timer that ticks at `timerInterval` for `timerDuration`, and is then done. Also not exported to Excel (incompatible signature). Notice that from F#, the `timer.Elapsed` event of the BCL `Timer` class implements `IObservable`, so can be used directly with the transformations in the F# `Observable` module.\\n\\n```fsharp\\nlet createTimer timerInterval timerDuration =\\n    // setup a timer\\n    let timer = new System.Timers.Timer(float timerInterval)\\n    timer.AutoReset <- true\\n    // return an async task for stopping it after the duration\\n    let timerStop = async {\\n        timer.Start()\\n        do! Async.Sleep timerDuration\\n        timer.Stop() \\n        }\\n    Async.Start timerStop\\n    // Make sure that the type we actually observe in the event is supported by Excel\\n    // by converting the events to timestamps\\n    timer.Elapsed |> Observable.map (fun elapsed -> DateTime.Now) \\n```\\n\\n* **Event implementation**: Finally this is the Excel function that will tick away in a cell. Entered into a cell (_and formatted as a Time value_), the formula `=startTimer(5000, 60000)` will show a clock that ticks every 5 seconds for a minute.\\n\\n```fsharp\\nlet startTimer timerInterval timerDuration =\\n    FsAsyncUtil.excelObserve \\"startTimer\\" [|float timerInterval; float timerDuration|] (createTimer timerInterval timerDuration)\\n```\\n\\n\\n## Putting everything together in an Excel add-in\\n\\nA complete `.dna` script file with the above code can be found in the [Excel-DNA distribution][exceldna-repo], under [Distribution\\\\Samples\\\\Async\\\\FsAsync.dna][fsasync-sample].\\n\\nAlternatively, the following steps would build an add-in in Visual Studio:\\n\\n* Create a new F# library in Visual Studio.\\n* Install the Excel-DNA package from NuGet (`Install-Package Excel-DNA` from the NuGet console).\\n* Set up the Debug path:\\n  1. Select \u201cStart External Program\u201d and browse to find Excel.exe, e.g. for Excel 2010 the path might be: `C:\\\\Program Files (x86)\\\\Microsoft Office\\\\Office14\\\\EXCEL.EXE`.\\n  2. Enter the full path to the `.xll` file in the output as the Command line arguments, e.g. `C:\\\\MyProjects\\\\TestDnaFs\\\\bin\\\\Debug\\\\TestDnaFs-addin.xll`.\\n* Place the following code in `Library1.fs`, compile and run:\\n\\n```fsharp\\nnamespace FsAsync\\n\\nopen System\\nopen System.Threading\\nopen System.Net\\nopen Microsoft.FSharp.Control.WebExtensions\\nopen ExcelDna.Integration\\n\\n/// This class implements the IExcelAddin which allows us to initialize the ExcelAsyncUtil support.\\n/// It must not be a nested class (e.g. defined as a type inside a module) but a top-level class (inside a namespace)\\ntype FsAsyncAddIn () =\\n    interface IExcelAddIn with\\n        member this.AutoOpen ()  = \\n            ExcelAsyncUtil.Initialize ()\\n        member this.AutoClose () = ExcelAsyncUtil.Uninitialize ()\\n\\n    // a regular Excel UDF just to show that the add-in works\\n    static member fsaAddThem (x:double) (y:double) = x + y\\n\\n/// Some utility functions for connecting Excel-DNA async with F#\\nmodule FsAsyncUtil =\\n    /// A helper to pass an F# Async computation to Excel-DNA \\n    let excelRunAsync functionName parameters async =\\n        let obsSource =\\n            ExcelObservableSource(\\n                fun () -> \\n                { new IExcelObservable with\\n                    member __.Subscribe observer =\\n                        // make something like CancellationDisposable\\n                        let cts = new CancellationTokenSource ()\\n                        let disp = { new IDisposable with member __.Dispose () = cts.Cancel () }\\n                        // Start the async computation on this thread\\n                        Async.StartWithContinuations \\n                            (   async, \\n                                ( fun result -> \\n                                    observer.OnNext(result)\\n                                    observer.OnCompleted () ),\\n                                ( fun ex -> observer.OnError ex ),\\n                                ( fun ex ->\\n                                    observer.OnCompleted () ),\\n                                cts.Token \\n                            )\\n                        // return the disposable\\n                        disp\\n                }) \\n        ExcelAsyncUtil.Observe (functionName, parameters, obsSource)\\n\\n    /// A helper to pass an F# IObservable to Excel-DNA\\n    let excelObserve functionName parameters observable = \\n        let obsSource =\\n            ExcelObservableSource(\\n                fun () -> \\n                { new IExcelObservable with\\n                    member __.Subscribe observer =\\n                        // Subscribe to the F# observable\\n                        Observable.subscribe (fun value -> observer.OnNext (value)) observable\\n                })\\n        ExcelAsyncUtil.Observe (functionName, parameters, obsSource)\\n\\n// Some test functions\\nmodule TestFunctions =\\n    /// Plain synchronous download function\\n    /// can be called from Excel\\n    let downloadString url = \\n        try\\n            let uri = new System.Uri(url)\\n            let webClient = new WebClient()\\n            let html = webClient.DownloadString(uri)\\n            html\\n        with\\n            | ex -> \\"!!!ERROR: \\" + ex.Message\\n\\n    /// Uses Excel-DNA async to run download on a ThreadPool thread\\n    let downloadStringAsyncTP1 url = \\n        ExcelAsyncUtil.Run (\\"downloadStringAsyncTP1\\", url, (fun () -> downloadString url :> obj))\\n    \\n    /// Create an F# asynchronous computation for the download\\n    /// Not exported to Excel\\n    let downloadStringAsyncImpl url = async {\\n        try\\n    \\n            // In here we could check for cancellation using \\n            // let! ct = Async.CancellationToken\\n            // if ct.IsCancellationRequested then ...\\n            let uri = new System.Uri(url)\\n            let webClient = new WebClient()\\n            let! html = webClient.AsyncDownloadString(uri)\\n            return html\\n        with\\n            | ex -> return \\"!!!ERROR: \\" + ex.Message \\n        }\\n    \\n    /// This function runs the async computation synchronously on a ThreadPool thread\\n    /// because that\'s what ExcelAsyncUtil.Run does\\n    /// Blocking calls will block a ThreadPool thread, eventually limiting the concurrency of the async calls\\n    let downloadStringAsyncTP2 url = \\n        ExcelAsyncUtil.Run (\\"downloadStringAsyncTP2\\", url, (fun () -> Async.RunSynchronously (downloadStringAsyncImpl url) :> obj))\\n    \\n    /// This runs the async computation using true F# async\\n    /// Should not block ThreadPool threads, and allows cancellation\\n    let downloadStringAsync url = \\n        FsAsyncUtil.excelRunAsync \\"downloadStringAsync\\" url (downloadStringAsyncImpl url)\\n    \\n    // Helper that will create a timer that ticks at timerInterval for timerDuration, then stops\\n    // Not exported to Excel (incompatible type)\\n    let createTimer timerInterval timerDuration =\\n        // setup a timer\\n        let timer = new System.Timers.Timer(float timerInterval)\\n        timer.AutoReset  Observable.map (fun elapsed -> DateTime.Now) \\n    \\n    // Excel function to start the timer - using the fact that F# events implement IObservable\\n    let startTimer timerInterval timerDuration =\\n        FsAsyncUtil.excelObserve \\"startTimer\\" [|float timerInterval; float timerDuration|] (createTimer timerInterval timerDuration)\\n```\\n\\n\\n## Support and feedback\\n\\nThe best place to ask any questions related to Excel-DNA is the [Excel-DNA Google group][excel-dna-group]. Any feedback from F# users trying out Excel-DNA or the features discussed here will be very welcome. I can also be contacted directly at <govert@dnakode.com>.\\n\\n[async-python]: http://blogs.msdn.com/b/dsyme/archive/2013/03/24/asynchronous-programming-from-f-to-python.aspx\\n[reactive]: http://www.infoq.com/interviews/petricek-fsharp-functional-languages\\n[async-cs-samples]: http://exceldna.codeplex.com/wikipage?title=Asynchronous%20Functions\\n[rx-excel]: http://exceldna.codeplex.com/wikipage?title=Reactive%20Extensions%20for%20Excel\\n[exceldna-repo]: https://github.com/Excel-DNA/ExcelDna\\n[fsasync-sample]: https://github.com/Excel-DNA/ExcelDna/blob/master/Distribution/Samples/Async/FsAsync.dna\\n[excel-dna-group]: http://groups.google.com/group/exceldna"},{"id":"/2012/12/20/excel-dna-nuget-package-updated","metadata":{"permalink":"/blog/2012/12/20/excel-dna-nuget-package-updated","source":"@site/blog/2012-12-20-excel-dna-nuget-package-updated.md","title":"Excel-DNA NuGet Package Updated","description":"I\'ve updated and improved the Excel-DNA NuGet package. (NuGet is the Visual Studio package manager that makes it easy to download and install external libraries into your projects.)","date":"2012-12-20T22:30:00.000Z","formattedDate":"December 20, 2012","tags":[{"label":"exceldna","permalink":"/blog/tags/exceldna"},{"label":"nuget","permalink":"/blog/tags/nuget"}],"readingTime":0.725,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA NuGet Package Updated","date":"2012-12-20 22:30:00 -0000","authors":"govert","tags":["exceldna","nuget"]},"prevItem":{"title":"Async and event-streaming Excel UDFs with F#","permalink":"/blog/2013/03/26/async-and-event-streaming-excel-udfs-with-f"},"nextItem":{"title":"Excel-DNA Version 0.30 Released","permalink":"/blog/2012/12/13/excel-dna-version-0-30-released"}},"content":"I\'ve updated and improved the [Excel-DNA NuGet package][nuget-package]. ([NuGet][nuget] is the Visual Studio package manager that makes it easy to download and install external libraries into your projects.)\\n\\nTo turn your Class Library project into an Excel add-in, just open Tools -> Library Package Manager -> Package Manager Console, and enter\\n\\n```powershell\\nPM> Install-Package Excel-DNA\\n```\\n\\nThe Excel-DNA package now has an install script that creates the required `.dna` file, and a post-build step to copy the `.xll` and run the packing tool, and even configures debugging. The package should work for C#, Visual Basic and F# Class Library projects on:\\n\\n* Visual Studio 2010 Professional and higher\\n* Visual Studio 2012 Professional and higher\\n* Visual Studio 2012 Express for Windows Desktop\\n\\nPlease post any feedback - bugs, good or bad comments - to the [Excel-DNA Google group][exceldna-group].\\n\\n[nuget-package]: http://nuget.org/packages/Excel-DNA/\\n[nuget]: http://nuget.org\\n[exceldna-group]: http://groups.google.com/group/exceldna"},{"id":"/2012/12/13/excel-dna-version-0-30-released","metadata":{"permalink":"/blog/2012/12/13/excel-dna-version-0-30-released","source":"@site/blog/2012-12-13-excel-dna-version-0-30-released.md","title":"Excel-DNA Version 0.30 Released","description":"Excel-DNA Version 0.30 has now been released on CodePlex. The download","date":"2012-12-13T22:30:00.000Z","formattedDate":"December 13, 2012","tags":[{"label":"releases","permalink":"/blog/tags/releases"}],"readingTime":2.175,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA Version 0.30 Released","date":"2012-12-13 22:30:00 -0000","authors":"govert","tags":["releases"]},"prevItem":{"title":"Excel-DNA NuGet Package Updated","permalink":"/blog/2012/12/20/excel-dna-nuget-package-updated"},"nextItem":{"title":"Patrick O\'Beirne\'s guide for Excel VBA to VB.NET migration","permalink":"/blog/2012/05/04/patrick-obeirnes-guide-on-excel-vba-to-vb-net-migration"}},"content":"Excel-DNA Version 0.30 has now been released on CodePlex. The download\\nis available from [http://exceldna.codeplex.com/releases/view/95861][release-v0-30].\\n\\nThis version implements support for RTD-based asynchronous worksheet\\nfunctions based on a thread-safe RTD base class - `ExcelRtdServer`. The\\nasynchronous support is designed to (optionally) integrate with\\nthe .NET 4.0 Task-based operations, as well as the Reactive Extensions\\nlibrary, allowing `IObservable`s to be exposed as \\"live\\" worksheet UDFs\\n- (thus \\"RxExcel\\"). The language-specific support for asynchronous\\nfunctions found in C# 5, Visual Basic 11 and F# 2.0 can be easily\\nintegrated with the Excel-DNA asynchronous interfaces. Some examples\\nexperimenting with the new async features are available in the\\ndownload.\\n\\nVarious bug fixes have also accumulated over the last 18 months, and\\nare collected in this release.\\n\\nAs always, I greatly appreciate any feedback on this version, and on\\nExcel-DNA in general. Any comments or questions are welcome on the\\nGoogle group or by contacting me directly.\\n\\n## Changelist - Version 0.30 (12 December 2012)\\n\\n* Fixed `LoadComAddIn` error when using a direct `ExcelComAddIn`-derived class.\\n* Fixed (Ribbon Helper) display in ribbon tooltips.\\n* Fixed RTD / array formula activation bug.\\n* Fixed `IsMacroType=true` reference argument sheet error (`ExcelReference` pointed to active sheet instead of current sheet).\\n* Fixed array marshaling pointer manipulation concern under 64-bit Excel.\\n* Fixed check for derived attributes too - for backward compatibility with v. 0.25.\\n* Fixed assembly multiple-loading problem for packed assemblies.\\n* Fixed persistent COM registration (`Regsv32.exe` / `ComServer.DllRegisterServer`) to allow `HKCR` registration whenever possible (for UAC elevation issue).\\n* Fixed Excel version check when COM / RTD Server loads before add-in is loaded - ribbon would not load.\\n* Fixed `IntPtr` `StackOverflowException` in high-memory 32-bit processes.\\n* Fixed custom task panes `UserControl` activation - do `HKCR` registration whenever possible (for UAC elevation issue).\\n* Fixed `double[0,1]` array marshaling memory allocation error with potential access violation.\\n* Allow abstract base classes in `ExcelRibbon` class hierarchy. Now loads the first concrete descendent of ExcelRibbon as the ribbon handler.\\n* Remove Obsolete class `ExcelDna.Integration.Excel`. (Use `ExcelDnaUtil` instead.) Allows smooth `XlCall` usage.\\n* Allow external `SourceItem` packing.\\n* Add `ExcelAsyncUtil` for async macro calls.\\n* Add thread-safe RTD server base class `ExcelRtdServer`.\\n* Add async function helper as `ExcelAsyncUtil.Run`.\\n* Add support for Reactive Extensions via RTD via `ExcelAsyncUtil.Observe` and related interfaces.\\n* Change `ExcelRibbon` and `ComAddIn` loading to use declared `ProgId` and `Guid` if _both_ attributes are present. Fixed Ribbon QAT issue.\\n* Revisit caching of `Application` object.\\n* Rename `ExcelDna.Integration.Integration` to `ExcelDna.Integration.ExcelIntegration`.\\n* Implement macro shortcuts (from `ExcelCommand` attributes).\\n* Changed re-open via File->Open to do full `AppDomain` unload and add-in reload.\\n\\n[release-v0-30]: http://exceldna.codeplex.com/releases/view/95861"},{"id":"/2012/05/04/patrick-obeirnes-guide-on-excel-vba-to-vb-net-migration","metadata":{"permalink":"/blog/2012/05/04/patrick-obeirnes-guide-on-excel-vba-to-vb-net-migration","source":"@site/blog/2012-05-04-patrick-obeirnes-guide-on-excel-vba-to-vb-net-migration.md","title":"Patrick O\'Beirne\'s guide for Excel VBA to VB.NET migration","description":"Patrick O\'Beirne is an Excel guru who has recently been migrating some add-ins from VBA to .NET using Excel-DNA. He has some posts on the migration, including a great list of the language and interop differences to be aware of when migrating. Worth a look...","date":"2012-05-04T16:55:00.000Z","formattedDate":"May 4, 2012","tags":[],"readingTime":0.245,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Patrick O\'Beirne\'s guide for Excel VBA to VB.NET migration","date":"2012-05-04 16:55:00 -0000","authors":"govert"},"prevItem":{"title":"Excel-DNA Version 0.30 Released","permalink":"/blog/2012/12/13/excel-dna-version-0-30-released"},"nextItem":{"title":"Excel VBA to VB.NET with Excel-DNA and NetOffice","permalink":"/blog/2012/01/30/excel-vba-to-vb-net-with-excel-dna-and-netoffice"}},"content":"[Patrick O\'Beirne][patrick-o-beirne] is an Excel guru who has recently been migrating some add-ins from VBA to .NET using Excel-DNA. He has some posts on the migration, including a great [list of the language and interop differences][migrating] to be aware of when migrating. Worth a look...\\n\\n[patrick-o-beirne]: http://sysmod.wordpress.com/\\n[migrating]: http://sysmod.wordpress.com/2012/05/04/migrating-excel-vba-add-in-to-vb-net-exceldna-netoffice/"},{"id":"/2012/01/30/excel-vba-to-vb-net-with-excel-dna-and-netoffice","metadata":{"permalink":"/blog/2012/01/30/excel-vba-to-vb-net-with-excel-dna-and-netoffice","source":"@site/blog/2012-01-30-excel-vba-to-vb-net-with-excel-dna-and-netoffice.md","title":"Excel VBA to VB.NET with Excel-DNA and NetOffice","description":"Excel-DNA is a great library to help ease the path from Excel VBA to VB.NET. Last year another part of the puzzle fell in place: I discovered NetOffice, a version-independent set of Office interop assemblies put together by Sebastian Lange. By referencing the NetOffice assemblies instead of the official Primary Interop Assemblies (PIA) for Office, an Excel-DNA add-in can target various Excel versions with a single add-in, and also ease distribution of the required interop assemblies, even packing them into the .xll add-in itself.","date":"2012-01-30T13:29:00.000Z","formattedDate":"January 30, 2012","tags":[{"label":"samples","permalink":"/blog/tags/samples"}],"readingTime":1.45,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel VBA to VB.NET with Excel-DNA and NetOffice","date":"2012-01-30 13:29:00 -0000","authors":"govert","tags":["samples"]},"prevItem":{"title":"Patrick O\'Beirne\'s guide for Excel VBA to VB.NET migration","permalink":"/blog/2012/05/04/patrick-obeirnes-guide-on-excel-vba-to-vb-net-migration"},"nextItem":{"title":"Excel-DNA version 0.29 - RC available","permalink":"/blog/2011/05/16/excel-dna-version-0-29-rc-available"}},"content":"Excel-DNA is a great library to help ease the path from Excel VBA to VB.NET. Last year another part of the puzzle fell in place: I discovered [NetOffice][netoffice], a version-independent set of Office interop assemblies put together by Sebastian Lange. By referencing the NetOffice assemblies instead of the official Primary Interop Assemblies (PIA) for Office, an Excel-DNA add-in can target various Excel versions with a single add-in, and also ease distribution of the required interop assemblies, even packing them into the `.xll` add-in itself.\\n\\nTo explore how Excel-DNA and NetOffice can combine to convert a VBA add-in to VB.NET, I picked a small add-in made by [Robert del Vicario][robert-vicario] that does a risk analysis simulation inspired by the [Pallisade @RISK][palisade-risk] add-in. I took [Robert\'s original RiskGen VBA add-in][riskgen-vba], and created a new Excel-DNA add-in in VB.NET (I used Visual Studio, but the free [SharpDevelop][sharpdevelop] IDE should work fine too). I documented the steps along the way of creating the VB.NET project, making an add-in based on Excel-DNA and using NetOffice to help port the VBA code to VB.NET. The resulting document (RiskGen Port Log.docx) outlining exactly how I ported the add-in, with the new VB.NET-based [RiskGen.NET][riskgen-net] is also on Robert\'s site.\\n\\nI\'m also looking for some more examples of free/open source VBA add-ins to port to Excel-DNA. The best add-ins will contain a mix of user-defined functions and macros which use the Excel object model. Please post to the Google group or mail me directly if you have any suggestions.\\n\\nAnd as always, if you need any support porting your Excel VBA add-ins to .NET using Excel-DNA, I\'m happy to help on the [Excel-DNA Google group][excel-dna-group].\\n\\n[netoffice]: https://github.com/netoffice\\n[robert-vicario]: http://rwdvc.posterous.com\\n[palisade-risk]: http://www.palisade.com/risk/\\n[riskgen-vba]: http://rwdvc.posterous.com/riskgen-test\\n[riskgen-net]: http://rwdvc.posterous.com/riskgen-in-vbnet\\n[sharpdevelop]: http://www.icsharpcode.net/OpenSource/SD/Download/#SharpDevelop4x\\n[excel-dna-group]: http://groups.google.com/group/exceldna"},{"id":"/2011/05/16/excel-dna-version-0-29-rc-available","metadata":{"permalink":"/blog/2011/05/16/excel-dna-version-0-29-rc-available","source":"@site/blog/2011-05-16-excel-dna-version-0-29-rc-available.md","title":"Excel-DNA version 0.29 - RC available","description":"I have posted a release candidate of Excel-DNA version 0.29 to the CodePlex site. The download is available at http://exceldna.codeplex.com/releases/view/66405. I will wait a week or two for some confirmation that this version works correctly before setting this release to \\"recommended\\" status and updating the NuGet package. Any results from your testing with this version would be very helpful.","date":"2011-05-16T13:09:00.000Z","formattedDate":"May 16, 2011","tags":[],"readingTime":1.97,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Excel-DNA version 0.29 - RC available","date":"2011-05-16 13:09:00 -0000","authors":"govert"},"prevItem":{"title":"Excel VBA to VB.NET with Excel-DNA and NetOffice","permalink":"/blog/2012/01/30/excel-vba-to-vb-net-with-excel-dna-and-netoffice"},"nextItem":{"title":"Financial Analytics Suite (FinAnSu) - made with Excel-DNA","permalink":"/blog/2011/04/28/financial-analytics-suite-finansu-made-with-excel-dna"}},"content":"I have posted a release candidate of Excel-DNA version 0.29 to the CodePlex site. The download is available at [http://exceldna.codeplex.com/releases/view/66405][release-0-29]. I will wait a week or two for some confirmation that this version works correctly before setting this release to \\"recommended\\" status and updating the NuGet package. Any results from your testing with this version would be very helpful.\\n\\nExcel-DNA version 0.29 adds support for a number of specialized Excel features. The 64-bit version of Excel 2010 is fully supported, registration-free Custom Task Panes can be created under Excel 2007 and later, direct COM server integration can improve integration with legacy VBA code, and macros with parameters are registered. In addition, there are some features to improve the development and debugging workflow, and a few minor bugfixes. The complete change list is included below.\\n\\nMore information about the new features will be posted on the Excel-DNA website in the coming weeks. Any comments or questions are welcome on the Google group - [http://groups.google.com/group/exceldna][excel-dna-group] - or by contacting me directly.\\n\\nAs always, I greatly appreciate any feedback on this version, and on Excel-DNA in general.\\n\\n-Govert\\n\\n### Complete change list\\n\\n* **BREAKING CHANGE!** Changed `SheetId` in the `ExcelReference` type to an `IntPtr` for 64-bit compatibility.\\n* Changed initialization - only create sandboxed `AppDomain` under .NET 4 (or if explicitly requested with `CreateSandboxedAppDomain=\\"true\\"` attribute on `DnaLibrary` tag in .dna file).\\n* Fixed memory leak when getting `SheetId` for `ExcelReference` parameters.\\n* Fixed Ribbon `RunTagMacro` when no Workbook open.\\n* Added support for the 64-bit version of Excel 2010 with the .Net 4 runtime.\\n* Added Cluster-safe function support for Excel 2010 HPC Cluster Connector - mark functions as `IsClusterSafe=true`.\\n* Added `CustomTaskPane` support and sample.\\n* Added COM server support for RTD servers and other `ComVisible` classes. Mark `ExternalLibraries` and Projects as `ComServer=\\"true\\"` in the .dna file. Supports `Regsvr32` registration or by calling `ComServer.DllRegisterServer`. Allows direct RTD and VBA object instantiation. Includes `TypeLib` registration and packing support.\\n* Added support for macros with parameters.\\n* Added `ArrayResizer` sample.\\n* Added C# 4 dynamic type sample.\\n* Added Path attribute to `SourceItem` tag to allow external source.\\n* Added `LoadFromBytes` attribute to `ExternalLibrary` tag to prevent locking of .dll.\\n* Added `/O` output path option to `ExcelDnaPack`.\\n* Added \\"before\\" option to CommandBars xml.\\n* Added `Int64` support for parameters and return values.\\n\\n[release-0-29]: http://exceldna.codeplex.com/releases/view/66405\\n[excel-dna-group]: http://groups.google.com/group/exceldna"},{"id":"/2011/04/28/financial-analytics-suite-finansu-made-with-excel-dna","metadata":{"permalink":"/blog/2011/04/28/financial-analytics-suite-finansu-made-with-excel-dna","source":"@site/blog/2011-04-28-financial-analytics-suite-finansu-made-with-excel-dna/index.md","title":"Financial Analytics Suite (FinAnSu) - made with Excel-DNA","description":"I recently noticed a very nice add-in developed by Bryan McKelvey called FinAnSu. The whole add-in is generously available under the MIT open source license, and is a fantastic example of what can be built with Excel-DNA.","date":"2011-04-28T22:51:00.000Z","formattedDate":"April 28, 2011","tags":[],"readingTime":0.81,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Financial Analytics Suite (FinAnSu) - made with Excel-DNA","date":"2011-04-28 22:51:00 -0000","authors":"govert"},"prevItem":{"title":"Excel-DNA version 0.29 - RC available","permalink":"/blog/2011/05/16/excel-dna-version-0-29-rc-available"},"nextItem":{"title":"Resizing Excel UDF result arrays","permalink":"/blog/2011/01/30/resizing-excel-udf-result-arrays"}},"content":"I recently noticed a very nice add-in developed by [Bryan McKelvey][bryan-mckelvey] called [FinAnSu][finansu]. The whole add-in is generously available under the MIT open source license, and is a fantastic example of what can be built with Excel-DNA.\\n\\n[FinAnSu][finansu] uses a ribbon interface to make the various functions and macros easy to find. The RTD server support is used to implement asynchronous data update functions, providing a live quote feed from Bloomberg, Google or Yahoo! And then there is a bunch of useful-looking financial functions. Here\'s a little preview:\\n\\n![FinAnSu Quote Animated](./finansu-quote-animated.gif)\\n\\nFind the project on Google code: [http://code.google.com/p/finansu/][finansu], with detailed documentation on the wiki: [http://code.google.com/p/finansu/wiki/Introduction][finansu-docs].\\n\\nYou can browse through the [source code][finansu-source] online, but to download a copy of the whole project you\'ll need a [Mercurial client][mercurial-client]. I just installed the one called Mercurial 1.8.2 MSI installer and ran `hg clone https://finansu.googlecode.com/hg/ finansu` from a command prompt.\\n\\n[bryan-mckelvey]: http://www.brymck.com/\\n[finansu]: http://code.google.com/p/finansu/\\n[finansu-quote-img]: /images/finansu-quote-animated.gif \\"FinAnSu Quote Animated\\"\\n[finansu-docs]: http://code.google.com/p/finansu/wiki/Introduction\\n[finansu-source]: http://code.google.com/p/finansu/source/browse/\\n[mercurial-client]: http://mercurial.selenic.com/downloads/"},{"id":"/2011/01/30/resizing-excel-udf-result-arrays","metadata":{"permalink":"/blog/2011/01/30/resizing-excel-udf-result-arrays","source":"@site/blog/2011-01-30-resizing-excel-udf-result-arrays.md","title":"Resizing Excel UDF result arrays","description":"Update (21 June 2017)","date":"2011-01-30T18:27:00.000Z","formattedDate":"January 30, 2011","tags":[{"label":"samples","permalink":"/blog/tags/samples"},{"label":".net","permalink":"/blog/tags/net"},{"label":"async","permalink":"/blog/tags/async"},{"label":"excel","permalink":"/blog/tags/excel"},{"label":"exceldna","permalink":"/blog/tags/exceldna"},{"label":"xll","permalink":"/blog/tags/xll"}],"readingTime":5.47,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Resizing Excel UDF result arrays","date":"2011-01-30 18:27:00 -0000","authors":"govert","tags":["samples",".net","async","excel","exceldna","xll"]},"prevItem":{"title":"Financial Analytics Suite (FinAnSu) - made with Excel-DNA","permalink":"/blog/2011/04/28/financial-analytics-suite-finansu-made-with-excel-dna"},"nextItem":{"title":"Offloading UDF computations to a Windows HPC cluster from Excel 2010","permalink":"/blog/2010/12/09/cluster-udf-support"}},"content":"**Update (21 June 2017): The most up-to-date version of the ArrayResizer utility can be found here**: <https://github.com/Excel-DNA/ExcelDna/blob/master/Distribution/Samples/ArrayResizer.dna>\\n\\n**Update: To work correctly under Excel 2000/2002/2003, this sample requires at least version 0.29.0.12 of Excel-DNA**.\\n\\nA common question on the [Excel-DNA group](http://groups.google.com/group/exceldna) is how to automatically resize the results of an array formula. The most well-know appearance of this trick is in the Bloomberg add-in.\\n\\n**WARNING! This is a bad idea**. Excel does not allow you to modify the sheet from within a user-defined function. Doing this breaks Excel\'s calculation model.\\n\\nAnyway, here is my attempt at an Excel-DNA add-in that implements this trick. My approach is to run a macro on a separate thread that will check and if required will expand the formula to an array formula of the right size. This way nothing ugly gets done if the array size is already correct - future recalculations will not run the formula array resizer if the size is still correct.\\n\\nThe code below will register a function call `Resize`. You can either call `Resize` from within your function, or enter something like `=Resize(MyFunction(\u2026))` as the cell formula. The code also registers two sample functions, `MakeArray` and `MakeArrayAndResize` to play with, each take the number of rows and columns for the size of the returned array.\\n\\nTo test this:\\n\\n1. [Get started with Excel-DNA](/).\\n2. Copy the code and xml wrapper into a text file called `Resizer.dna` (the xml wrapper is at the end of this post).\\n3. Copy the `ExcelDna.xll` in the Excel-DNA distribution to `Resizer.xll` (next to the `Resizer.dna`).\\n4. File->Open the `Resizer.xll` in Excel and enter something like `=MakeArrayAndResize(5,3)` into a cell.\\nSee how it grows.\\n\\nIn the current version, the formula expansion is destructive, so anything in the way will be erased. One case I don\'t know how to deal with is when there is an array that would be partially overwritten by the expended function result. In the current version Excel will display an error that says \\"You cannot change part of an array.\\", and I replace the formula with a text version of it. I\'d love to know how you think we should handle this case.\\n\\nAny questions or comments (can if anyone can get it to work, or not?) can be directed to the [Excel-DNA Google group][excel-dna-group] or to me directly via e-mail. I\'m pretty sure there are a few cases where it will break - please let me know if you run into any problems.\\n\\nI\'ll try to gather the comments and suggestions for an improved implementation that might go into the next version of Excel-DNA.\\n\\nAlso, if you have any questions about how the implementation works, I\'d be happy to write a follow up post that explains a bit more of what I\'m doing. But first, let\'s try to get it working.\\n\\nHere\'s the Resizer add-in code:\\n\\n```csharp\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Reflection;\\nusing System.Runtime.InteropServices;\\nusing System.Threading;\\nusing ExcelDna.Integration;\\n\\npublic static class ResizeTest\\n{\\n    public static object MakeArray(int rows, int columns)\\n    {\\n        object[,] result = new string[rows, columns];\\n        for (int i = 0; i < rows; i++)\\n        {\\n            for (int j = 0; j < columns; j++)\\n            {\\n                result[i,j] = string.Format(\\"({0},{1})\\", i, j);\\n            }\\n        }\\n\\n        return result;\\n    }\\n     \\n    public static object MakeArrayAndResize(int rows, int columns)\\n    {\\n        object result = MakeArray(rows, columns);\\n        // Call Resize via Excel - so if the Resize add-in is not part of this code, it should still work.\\n        return XlCall.Excel(XlCall.xlUDF, \\"Resize\\", result);\\n    }\\n}\\n\\npublic class Resizer\\n{\\n    static Queue<ExcelReference> ResizeJobs = new Queue<ExcelReference>();\\n\\n    // This function will run in the UDF context.\\n    // Needs extra protection to allow multithreaded use.\\n    public static object Resize(object[,] array)\\n    {\\n        ExcelReference caller = XlCall.Excel(XlCall.xlfCaller) as ExcelReference;\\n        if (caller == null)\\n            return array;\\n     \\n        int rows = array.GetLength(0);\\n        int columns = array.GetLength(1);\\n     \\n        if ((caller.RowLast - caller.RowFirst + 1 != rows) ||\\n            (caller.ColumnLast - caller.ColumnFirst + 1 != columns))\\n        {\\n            // Size problem: enqueue job, call async update and return #N/A\\n            // TODO: Add guard for ever-changing result?\\n            EnqueueResize(caller, rows, columns);\\n            AsyncRunMacro(\\"DoResizing\\");\\n            return ExcelError.ExcelErrorNA;\\n        }\\n     \\n        // Size is already OK - just return result\\n        return array;\\n    }\\n     \\n    static void EnqueueResize(ExcelReference caller, int rows, int columns)\\n    {\\n        ExcelReference target = new ExcelReference(caller.RowFirst, caller.RowFirst + rows - 1, caller.ColumnFirst, caller.ColumnFirst + columns - 1, caller.SheetId);\\n        ResizeJobs.Enqueue(target);\\n    }\\n     \\n    public static void DoResizing()\\n    {\\n        while (ResizeJobs.Count > 0)\\n        {\\n            DoResize(ResizeJobs.Dequeue());\\n        }\\n    }\\n     \\n    static void DoResize(ExcelReference target)\\n    {\\n        try\\n        {\\n            // Get the current state for reset later\\n     \\n            XlCall.Excel(XlCall.xlcEcho, false);\\n     \\n            // Get the formula in the first cell of the target\\n            string formula = (string)XlCall.Excel(XlCall.xlfGetCell, 41, target);\\n            ExcelReference firstCell = new ExcelReference(target.RowFirst, target.RowFirst, target.ColumnFirst, target.ColumnFirst, target.SheetId);\\n     \\n            bool isFormulaArray = (bool)XlCall.Excel(XlCall.xlfGetCell, 49, target);\\n            if (isFormulaArray)\\n            {\\n                object oldSelectionOnActiveSheet = XlCall.Excel(XlCall.xlfSelection);\\n                object oldActiveCell = XlCall.Excel(XlCall.xlfActiveCell);\\n     \\n                // Remember old selection and select the first cell of the target\\n                string firstCellSheet = (string)XlCall.Excel(XlCall.xlSheetNm, firstCell);\\n                XlCall.Excel(XlCall.xlcWorkbookSelect, new object[] {firstCellSheet});\\n                object oldSelectionOnArraySheet = XlCall.Excel(XlCall.xlfSelection);\\n                XlCall.Excel(XlCall.xlcFormulaGoto, firstCell);\\n     \\n                // Extend the selection to the whole array and clear\\n                XlCall.Excel(XlCall.xlcSelectSpecial, 6);\\n                ExcelReference oldArray = (ExcelReference)XlCall.Excel(XlCall.xlfSelection);\\n     \\n                oldArray.SetValue(ExcelEmpty.Value);\\n                XlCall.Excel(XlCall.xlcSelect, oldSelectionOnArraySheet);\\n                XlCall.Excel(XlCall.xlcFormulaGoto, oldSelectionOnActiveSheet);\\n            }\\n            // Get the formula and convert to R1C1 mode\\n            bool isR1C1Mode = (bool)XlCall.Excel(XlCall.xlfGetWorkspace, 4);\\n            string formulaR1C1 = formula;\\n            if (!isR1C1Mode)\\n            {\\n                // Set the formula into the whole target\\n                formulaR1C1 = (string)XlCall.Excel(XlCall.xlfFormulaConvert, formula, true, false, ExcelMissing.Value, firstCell);\\n            }\\n            // Must be R1C1-style references\\n            object ignoredResult;\\n            XlCall.XlReturn retval = XlCall.TryExcel(XlCall.xlcFormulaArray, out ignoredResult, formulaR1C1, target);\\n            if (retval != XlCall.XlReturn.XlReturnSuccess)\\n            {\\n                // TODO: Consider what to do now!?\\n                // Might have failed due to array in the way.\\n                firstCell.SetValue(\\"\'\\" + formula);\\n            }\\n        }\\n        finally\\n        {\\n            XlCall.Excel(XlCall.xlcEcho, true);\\n        }\\n    }\\n     \\n    // Most of this from the newsgroup: http://groups.google.com/group/exceldna/browse_thread/thread/a72c9b9f49523fc9/4577cd6840c7f195\\n    private static readonly TimeSpan BackoffTime = TimeSpan.FromSeconds(1);\\n    static void AsyncRunMacro(string macroName)\\n    {\\n        // Do this on a new thread....\\n        Thread newThread = new Thread( delegate ()\\n        {\\n            while(true)\\n            {\\n                try\\n                {\\n                    RunMacro(macroName);\\n                    break;\\n                }\\n                catch(COMException cex)\\n                {\\n                    if(IsRetry(cex))\\n                    {\\n                        Thread.Sleep(BackoffTime);\\n                        continue;\\n                    }\\n                    // TODO: Handle unexpected error\\n                    return;\\n                }\\n                catch(Exception ex)\\n                {\\n                    // TODO: Handle unexpected error\\n                    return;\\n                }\\n            }\\n        });\\n        newThread.Start();\\n    }\\n     \\n    static void RunMacro(string macroName)\\n    {\\n        object xlApp;\\n        try\\n        {\\n            object xlApp = ExcelDnaUtil.Application;\\n            xlApp.GetType().InvokeMember(\\"Run\\", BindingFlags.InvokeMethod, null, xlApp, new object[] {macroName});\\n        }\\n        catch (TargetInvocationException tie)\\n        {\\n            throw tie.InnerException;\\n        }\\n        finally\\n        {\\n            Marshal.ReleaseComObject(xlApp);\\n        }\\n    }\\n     \\n    const uint RPC_E_SERVERCALL_RETRYLATER = 0x8001010A;\\n    const uint VBA_E_IGNORE = 0x800AC472;\\n    static bool IsRetry(COMException e)\\n    {\\n        uint errorCode = (uint)e.ErrorCode;\\n        switch(errorCode)\\n        {\\n            case RPC_E_SERVERCALL_RETRYLATER:\\n            case VBA_E_IGNORE:\\n                return true;\\n            default:\\n                return false;\\n        }\\n    }\\n}\\n```\\n\\n\\nYou can easily make a test add-in for this by wrapping the code into a .dna file with this around:\\n\\n```xml\\n<DnaLibrary Language=\\"CS\\">\\n<![CDATA[\\n\\n    \x3c!--// Paste all of the above code here //--\x3e\\n\\n]]>\\n</DnaLibrary>\\n```"},{"id":"/2010/12/09/cluster-udf-support","metadata":{"permalink":"/blog/2010/12/09/cluster-udf-support","source":"@site/blog/2010-12-09-cluster-udf-support.md","title":"Offloading UDF computations to a Windows HPC cluster from Excel 2010","description":"Excel 2010 introduced support for offloading UDF computations to a compute cluster. The Excel blog talks about it http http://technet.microsoft.com/en-us/library/ff877825(WS.10).aspx.","date":"2010-12-09T21:02:00.000Z","formattedDate":"December 9, 2010","tags":[{"label":"features","permalink":"/blog/tags/features"},{"label":".net","permalink":"/blog/tags/net"},{"label":"excel","permalink":"/blog/tags/excel"},{"label":"exceldna","permalink":"/blog/tags/exceldna"},{"label":"hpc","permalink":"/blog/tags/hpc"},{"label":"xll","permalink":"/blog/tags/xll"}],"readingTime":1.355,"hasTruncateMarker":false,"authors":[{"name":"Govert van Drimmelen","url":"https://github.com/Excel-DNA","imageURL":"https://avatars.githubusercontent.com/u/414659","key":"govert"}],"frontMatter":{"title":"Offloading UDF computations to a Windows HPC cluster from Excel 2010","date":"2010-12-09 21:02:00 -0000","authors":"govert","tags":["features",".net","excel","exceldna","hpc","xll"]},"prevItem":{"title":"Resizing Excel UDF result arrays","permalink":"/blog/2011/01/30/resizing-excel-udf-result-arrays"}},"content":"Excel 2010 introduced support for offloading UDF computations to a compute cluster. The Excel blog talks about it [http://blogs.msdn.com/b/excel/archive/2010/02/12/offloading-udf-s-to-a-windows-hpc-cluster.aspx][hpc-cluster], and there are some nice pictures on this TechNet article: [http://technet.microsoft.com/en-us/library/ff877825(WS.10).aspx][hpc-services].\\n\\nExcel-DNA now supports marking functions as cluster-safe, and I have updated the loader to allow add-ins to work under the `XllContainer` on the HPC nodes. There are some issues to be aware of:\\n\\n* The add-in does not create its own `AppDomain` when running on the compute node. One consequence is that no custom `.xll.config` file is used; configuration entries need to be set in the `XllContainer` configuration setup.\\n* There are some limitations on the size of array data that can be passed to and from UDF calls - this limit is probably configurable in the WCF service.\\n* Only the 32-bit host is currently supported.\\n\\nTo test this you will need an Windows HPC Server 2008 R2 cluster with the HPC Services for Excel installed. On the clients you need Excel 2010 with the HPC cluster connector installed. The latest check-in for Excel-DNA with this support is on GitHub: [https://github.com/Excel-DNA/ExcelDna][main-repo].\\n\\nIn the Microsoft HPC SDK there is a sample called ClusterUDF.xll with a few test functions. I have recreated these in C# in the samples file [Distribution\\\\Samples\\\\ClusterSample.dna][cluster-sample] Basically functions just need to be marked as `IsClusterSafe=true` to be pushed to the cluster for computation. For example\\n\\n```csharp\\n[ExcelFunction(IsClusterSafe=true)]\\npublic static int DnaCountPrimesC(int nFrom, int nTo)\\n{\\n    // ...\\n}\\n```\\n\\nAs usual, any feedback on this feature - questions or reports on whether you use it - will be most appreciated.\\n\\n[hpc-cluster]: http://blogs.msdn.com/b/excel/archive/2010/02/12/offloading-udf-s-to-a-windows-hpc-cluster.aspx\\n[hpc-services]: http://technet.microsoft.com/en-us/library/ff877825(WS.10).aspx\\n[main-repo]: https://github.com/Excel-DNA/ExcelDna\\n[cluster-sample]: https://github.com/Excel-DNA/ExcelDna/blob/master/Distribution/Samples/ClusterSample.dna"}]}')}}]);