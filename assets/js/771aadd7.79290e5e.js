"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[8304],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),c=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,k=u["".concat(d,".").concat(m)]||u[m]||s[m]||l;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1017:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const l={title:"Excel-DNA Packing Tool"},r=void 0,o={unversionedId:"archive/guides/exceldna-packing-tool",id:"archive/guides/exceldna-packing-tool",title:"Excel-DNA Packing Tool",description:"Excel-DNA has a packing tool that allows you to create a single-file .xll add-in.",source:"@site/docs/archive/guides/exceldna-packing-tool.md",sourceDirName:"archive/guides",slug:"/archive/guides/exceldna-packing-tool",permalink:"/docs/archive/guides/exceldna-packing-tool",draft:!1,tags:[],version:"current",frontMatter:{title:"Excel-DNA Packing Tool"},sidebar:"tutorialSidebar",previous:{title:"Enumerating Excel COM Automation Collections",permalink:"/docs/archive/guides/enumerating-excel-com-automation-collections"},next:{title:"FSharp Standalone Assemblies",permalink:"/docs/archive/guides/fsharp-standalone-assemblies"}},d={},c=[{value:"Preparation",id:"preparation",level:2},{value:"Packing",id:"packing",level:2},{value:"Other packing options",id:"other-packing-options",level:2},{value:"Limitations",id:"limitations",level:2}],p={toc:c};function s(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Excel-DNA has a packing tool that allows you to create a single-file .xll add-in."),(0,i.kt)("p",null,"When run on an add-in, the packing tool will compress and embed as resources into the .xll file the various parts of your add-in. The result is a single .xll file which contains your add-in and can be easily distributed. (The appropriate version of the .NET framework is still required on the client PC for your add-in to load.)"),(0,i.kt)("h1",{id:"usage"},"Usage"),(0,i.kt)("p",null,"The packing program is called ",(0,i.kt)("inlineCode",{parentName:"p"},"ExcelDnaPack.exe")," and is located in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Distribution")," directory in the Excel-DNA download."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"Usage: ExcelDnaPack.exe dnaPath [/O outputPath] [/Y]"))),(0,i.kt)("p",null,":  dnaPath      The path to the primary .dna file for the ExcelDna add-in.\n:  /Y           If the output .xll exists, overwrite without prompting.\n:  /O outPath   Output path - default is <dnaPath",">","-packed.xlll"),(0,i.kt)("h2",{id:"preparation"},"Preparation"),(0,i.kt)("p",null,"Ensure that your add-in, including the required add-in assemblies and additional dependencies are working correctly from some directory. You might have the following files in ",(0,i.kt)("inlineCode",{parentName:"p"},"C:\\FirstAddIn\\")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MyAddIn.dna")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MyAddIn.xll")," ",(0,i.kt)("em",{parentName:"li"},"(a renamed copy of ExcelDna.xll from the distribution)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MyExcelFunctions.dll")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MyLib.dll"))),(0,i.kt)("p",null,"where ",(0,i.kt)("inlineCode",{parentName:"p"},"MyExcelFunctions.dll")," contains the add-in functions that are exported to Excel, and ",(0,i.kt)("inlineCode",{parentName:"p"},"MyLib.dll")," is a .NET assembly that is used by ",(0,i.kt)("inlineCode",{parentName:"p"},"MyExcelFunctions.dll")," but is not directly exported to Excel."),(0,i.kt)("p",null,"Update the .dna file to look like this"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<DnaLibrary Name="My First AddIn" RuntimeVersion="v4.0" >\n  <ExternalLibrary Path="MyExcelFunctions.dll" Pack="true" />\n    <Reference Path="MyLib.dll" Pack="true" />\n</DnaLibrary>\n')),(0,i.kt)("p",null,"Note the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"I've added a ",(0,i.kt)("inlineCode",{parentName:"li"},'Pack="true"')," attribute to the ",(0,i.kt)("inlineCode",{parentName:"li"},"ExternalLibrary")," tag, to indicate that this assembly should be packed."),(0,i.kt)("li",{parentName:"ul"},"I've added an extra ",(0,i.kt)("inlineCode",{parentName:"li"},'<Reference Path=... Pack="true">')," tag for the referenced assembly. The ",(0,i.kt)("inlineCode",{parentName:"li"},'Pack="true"')," directive tells ExcelDnaPack to embed the ",(0,i.kt)("inlineCode",{parentName:"li"},"MyLib.dll")," assembly into the .xll file and resolve the reference at runtime from this embedded resource.")),(0,i.kt)("p",null,"One everything is in place, it's good to check that your add-in still works."),(0,i.kt)("h2",{id:"packing"},"Packing"),(0,i.kt)("p",null,"Now run the packing program. From a command prompt, go to the ",(0,i.kt)("inlineCode",{parentName:"p"},"C:\\FirstAddIn\\")," directory and run ",(0,i.kt)("inlineCode",{parentName:"p"},"ExcelDnaPack.exe MyAddIn.dna"),"."),(0,i.kt)("p",null,"The output should look something like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Excel-DNA Packing Tool Packing CommandLine Output",src:n(3610).Z,width:"785",height:"178"})),(0,i.kt)("p",null,"The result of the packing is a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"MyAddIn-packed.xll"),". This is the standalone .xll file, and can now be copied somewhere else and renamed to test."),(0,i.kt)("h2",{id:"other-packing-options"},"Other packing options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"If your add-in has a ",(0,i.kt)("inlineCode",{parentName:"p"},".xll.config")," file, say ",(0,i.kt)("inlineCode",{parentName:"p"},"MyAddIn.xll.config"),", it will also be packed. Note that if an actual .xll.config file is present at runtime, it will be loaded instead of the embedded .xll.config file. This allows you to embed a default configuration, and still override it at runtime if required.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Images can be embedded - useful for CommandBar and Ribbon custom UI extensions. Add tags ",(0,i.kt)("inlineCode",{parentName:"p"},'<Image Name="ButtonImage" Path="MyButtonImage.png" Pack="true" />')," and the image can be used from your ribbon ",(0,i.kt)("inlineCode",{parentName:"p"},".xml"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},".dna files can be nested, and will be embedded according to the Pack attributes: ",(0,i.kt)("inlineCode",{parentName:"p"},'<ExternalLibrary Path="OtherFile.dna" Pack="true" />'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"SourceItems in Project tags can also be packed.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The packing can also be incorporated into your build as a post-build step."))),(0,i.kt)("h2",{id:"limitations"},"Limitations"),(0,i.kt)("p",null,"Mixed code assemblies (that contain both managed and native code) cannot currently be packed."),(0,i.kt)("h1",{id:"notes-for-64-bit-excel"},"Notes for 64-bit Excel"),(0,i.kt)("p",null,"Note that a separate .xll must be created for the 64-bit version of Excel, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"ExcelDna64.xll")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"ExcelDna.xll"),". For the packing, one option is to make and additional .dna file, say ",(0,i.kt)("inlineCode",{parentName:"p"},"MyAddIn64.dna")," and corresponding ",(0,i.kt)("inlineCode",{parentName:"p"},"MyAddIn64.xll"),", which gets packed with ",(0,i.kt)("inlineCode",{parentName:"p"},"ExcelDnaPack.exe MyAddIn64.dna"),". Then the final distribution will have two files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MyAddInFinal.xll")," (renamed from MyAddIn-packed.xll)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MyAddInFinal64.xll")," (renamed from MyAddIn64-packed.xll)")))}s.isMDXComponent=!0},3610:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/exceldna-packing-tool-packing-commandline-output-244c89b30a1c58465a2cf7e046291701.png"}}]);