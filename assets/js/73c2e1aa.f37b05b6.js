"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[9596],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var l=n(7294);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,l,c=function(e,t){if(null==e)return{};var n,l,c={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var i=l.createContext({}),s=function(e){var t=l.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return l.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},f=l.forwardRef((function(e,t){var n=e.components,c=e.mdxType,r=e.originalType,i=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),f=s(n),p=c,m=f["".concat(i,".").concat(p)]||f[p]||u[p]||r;return n?l.createElement(m,o(o({ref:t},d),{},{components:n})):l.createElement(m,o({ref:t},d))}));function p(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var r=n.length,o=new Array(r);o[0]=f;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:c,o[1]=a;for(var s=2;s<r;s++)o[s]=n[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7649:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>s});var l=n(7462),c=(n(7294),n(3905));const r={title:"Async Macro Example"},o=void 0,a={unversionedId:"guides-advanced/async-macro-example-formatting-the-calling-cell-from-a-udf",id:"guides-advanced/async-macro-example-formatting-the-calling-cell-from-a-udf",title:"Async Macro Example",description:"We define a function that schedules a macro call to update the format of the calling range.",source:"@site/docs/guides-advanced/async-macro-example-formatting-the-calling-cell-from-a-udf.md",sourceDirName:"guides-advanced",slug:"/guides-advanced/async-macro-example-formatting-the-calling-cell-from-a-udf",permalink:"/docs/guides-advanced/async-macro-example-formatting-the-calling-cell-from-a-udf",draft:!1,tags:[],version:"current",frontMatter:{title:"Async Macro Example"},sidebar:"tutorialSidebar",previous:{title:"Guides - Advanced",permalink:"/docs/category/guides---advanced"},next:{title:"Building Excel-DNA From Source",permalink:"/docs/guides-advanced/building-excedna-from-source"}},i={},s=[],d={toc:s};function u(e){let{components:t,...n}=e;return(0,c.kt)("wrapper",(0,l.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"We define a function that schedules a macro call to update the format of the calling range."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-csharp"},'public static DateTime asyncFormatCaller()\n{\n    object caller = XlCall.Excel(XlCall.xlfCaller);\n    if (caller is ExcelReference)\n    {\n        ExcelAsyncUtil.QueueAsMacro(\n            delegate\n            {\n                // Set the desired selection, then apply formatting\n                using (new ExcelSelectionHelper((ExcelReference)caller))\n                {\n                    XlCall.Excel(XlCall.xlcFormatNumber, "h:mm:ss");\n                }\n            }\n        });\n    }\n    return DateTime.Now;\n}\n')),(0,c.kt)("p",null,"Above we use the following helper class to keep track of the current selection in a macro, so that the selection is correctly restored after the macro has completed."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-csharp"},"// Helper class to deal with Excel selections in 'using' style\npublic class ExcelSelectionHelper : XlCall, IDisposable\n{\n    object oldScreenUpdating;\n    object oldSelectionOnActiveSheet;\n    object oldActiveCellOnActiveSheet;\n\n    object oldSelectionOnRefSheet;\n    object oldActiveCellOnRefSheet;\n\n    public ExcelSelectionHelper(ExcelReference refToSelect)\n    {\n        oldScreenUpdating = Excel(xlfGetWorkspace, 40);\n        Excel(xlcEcho, false);\n\n        // Remember old selection state on the active sheet\n        oldSelectionOnActiveSheet = Excel(xlfSelection);\n        oldActiveCellOnActiveSheet = Excel(xlfActiveCell);\n\n        // Switch to the sheet we want to select\n        string refSheet = (string)Excel(xlSheetNm, refToSelect);\n        Excel(xlcWorkbookSelect, new object[]() { refSheet });\n\n        // record selection and active cell on the sheet we want to select\n        oldSelectionOnRefSheet = Excel(xlfSelection);\n        oldActiveCellOnRefSheet = Excel(xlfActiveCell);\n\n        // make the selection\n        Excel(xlcFormulaGoto, refToSelect);\n    }\n\n    public void Dispose()\n    {\n        Excel(xlcSelect, oldSelectionOnRefSheet, oldActiveCellOnRefSheet);\n\n        string oldActiveSheet = (string)Excel(xlSheetNm, oldSelectionOnActiveSheet);\n        Excel(xlcWorkbookSelect, new object[]() { oldActiveSheet });\n\n        Excel(xlcSelect, oldSelectionOnActiveSheet, oldActiveCellOnActiveSheet);\n\n        Excel(xlcEcho, oldScreenUpdating);\n    }\n}\n")),(0,c.kt)("p",null,"An improved function could first check whether the format of the caller needs to be updated before scheduling the macro call."))}u.isMDXComponent=!0}}]);