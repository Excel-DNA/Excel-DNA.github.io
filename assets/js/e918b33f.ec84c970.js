"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[2525],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=u(n),d=a,f=g["".concat(s,".").concat(d)]||g[d]||p[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6704:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={title:"Optional Parameters and Default Values"},i=void 0,l={unversionedId:"guides-basic/optional-parameters-and-default-values",id:"guides-basic/optional-parameters-and-default-values",title:"Optional Parameters and Default Values",description:"Update//github.com/Excel-DNA/Registration. I leave the documentation below as applying to the core Excel-DNA library. _",source:"@site/docs/guides-basic/optional-parameters-and-default-values.md",sourceDirName:"guides-basic",slug:"/guides-basic/optional-parameters-and-default-values",permalink:"/TestDocs/docs/guides-basic/optional-parameters-and-default-values",draft:!1,tags:[],version:"current",frontMatter:{title:"Optional Parameters and Default Values"},sidebar:"tutorialSidebar",previous:{title:"Integrating with VBA",permalink:"/TestDocs/docs/guides-basic/integrating-with-vba"},next:{title:"Performing Asynchronous Work",permalink:"/TestDocs/docs/guides-basic/performing-asynchronous-work"}},s={},u=[],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Update:")," There is now a project to develop rich parameter support using a custom registration processing pipeline. This includes support for Optional and Default values. See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Excel-DNA/Registration"},"https://github.com/Excel-DNA/Registration"),". I leave the documentation below as applying to the core Excel-DNA library. _"),(0,a.kt)("p",null,"There is currently no special support built into Excel-DNA for optional parameters or default values. You can implement these in your add-in by changing your parameter type to be 'object' and then dealing with the different options explicitly."),(0,a.kt)("p",null,"As an example, the code below shows how you could create a helper class to deal with the passed parameters, making the handling in you functions as easy as possible."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'using System;\nusing ExcelDna.Integration;\n\n// These are some functions that implement an optional parameter with some default value.\npublic class MyFunctions\n{\n    public static double TestDefault(double x, object yArg)\n    {\n        double y = Optional.Check(yArg, 17.0);\n\n        return x + y;\n    }\n\n    public static string TestHello(object nameArg)\n    {\n        string name = Optional.Check(nameArg, " Unknown person!?");\n\n        return "Hello " + name;\n    }\n\n    public static string TestSpecialDate(object dateArg)\n    {\n        DateTime date = Optional.Check(dateArg, DateTime.Now);\n\n        return "The special date is: " + date.ToString("dd MMMM yyyy");\n    }\n}\n\n// Here is the helper class - add to it or change as you require\ninternal static class Optional\n{\n    internal static string Check(object arg, string defaultValue)\n    {\n        if (arg is string)\n            return (string)arg;\n        else if (arg is ExcelMissing)\n            return defaultValue;\n        else\n            return arg.ToString();  // Or whatever you want to do here....\n\n        // Perhaps check for other types and do whatever you think is right ....\n        //else if (arg is double)\n        //    return "Double: " + (double)arg;\n        //else if (arg is bool)\n        //    return "Boolean: " + (bool)arg;\n        //else if (arg is ExcelError)\n        //    return "ExcelError: " + arg.ToString();\n        //else if (arg is object[,](,))\n        //    // The object array returned here may contain a mixture of types,\n        //    // reflecting the different cell contents.\n        //    return string.Format("Array[{0},{1}]({0},{1})",\n        //      ((object[,](,)(,))arg).GetLength(0), ((object[,](,)(,))arg).GetLength(1));\n        //else if (arg is ExcelEmpty)\n        //    return "<<Empty>>"; // Would have been null\n        //else if (arg is ExcelReference)\n        //  // Calling xlfRefText here requires IsMacroType=true for this function.\n        //                return "Reference: " +\n        //                     XlCall.Excel(XlCall.xlfReftext, arg, true);\n        //            else\n        //                return "!? Unheard Of ?!";\n    }\n\n    internal static double Check(object arg, double defaultValue)\n    {\n        if (arg is double)\n            return (double)arg;\n        else if (arg is ExcelMissing)\n            return defaultValue;\n        else\n            throw new ArgumentException();  // Will return #VALUE to Excel\n\n    }\n\n    // This one is more tricky - we have to do the double->Date conversions ourselves\n    internal static DateTime Check(object arg, DateTime defaultValue)\n    {\n        if (arg is double)\n            return DateTime.FromOADate((double)arg);    // Here is the conversion\n        else if (arg is string)\n            return DateTime.Parse((string)arg);\n        else if (arg is ExcelMissing)\n            return defaultValue;\n\n        else\n            throw new ArgumentException();  // Or defaultValue or whatever\n    }\n}\n')))}p.isMDXComponent=!0}}]);