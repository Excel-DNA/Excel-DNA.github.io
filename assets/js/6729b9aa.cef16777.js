"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[9922],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>p});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=c(a),p=i,m=h["".concat(s,".").concat(p)]||h[p]||u[p]||r;return a?n.createElement(m,o(o({ref:t},d),{},{components:a})):n.createElement(m,o({ref:t},d))}));function p(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5565:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:1},o=void 0,l={unversionedId:"archive/obsolete/Home",id:"archive/obsolete/Home",title:"Home",description:"Welcome to the Excel-DNA wiki!",source:"@site/docs/archive/obsolete/Home.md",sourceDirName:"archive/obsolete",slug:"/archive/obsolete/Home",permalink:"/docs/archive/obsolete/Home",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Obsolete",permalink:"/docs/category/obsolete"},next:{title:"Getting Started with Excel-DNA",permalink:"/docs/archive/obsolete/getting-started"}},s={},c=[{value:"What is Excel-DNA?",id:"what-is-excel-dna",level:3},{value:"Aren&#39;t there other ways to create Excel add-ins with .NET? Why should I use Excel-DNA?",id:"arent-there-other-ways-to-create-excel-add-ins-with-net-why-should-i-use-excel-dna",level:3},{value:"Shouldn&#39;t I just stick to the official Microsoft tools for making Excel add-ins, rather than relying on a third-party tool?",id:"shouldnt-i-just-stick-to-the-official-microsoft-tools-for-making-excel-add-ins-rather-than-relying-on-a-third-party-tool",level:3},{value:"What about VBA? Can Excel-DNA help me use my VBA skills and still move to .NET?",id:"what-about-vba-can-excel-dna-help-me-use-my-vba-skills-and-still-move-to-net",level:3}],d={toc:c};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Welcome to the Excel-DNA wiki!"),(0,i.kt)("p",null,"The wiki in this project will be used to document the internal implementation of the Excel-DNA core library (the native code .xll, ExcelDna.Loader and ExcelDna.Integration). Documentation for those using Excel-DNA to build add-in should go into the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Excel-DNA/Excel-DNA.github.io"},"https://github.com/Excel-DNA/Excel-DNA.github.io")," repository."),(0,i.kt)("h3",{id:"what-is-excel-dna"},"What is Excel-DNA?"),(0,i.kt)("p",null,"Excel-DNA is a library to help you make Excel add-ins with .NET. Your add-in can be written in VB.NET, C# or F# (or a combination of these), using the Visual Studio IDE or a just a text editor."),(0,i.kt)("h3",{id:"arent-there-other-ways-to-create-excel-add-ins-with-net-why-should-i-use-excel-dna"},"Aren't there other ways to create Excel add-ins with .NET? Why should I use Excel-DNA?"),(0,i.kt)("p",null,"There are a few different ways of making Excel add-ins with .NET, but Excel-DNA has unique advantages. First, let me explain the different kind of Excel add-ins."),(0,i.kt)("p",null,"Now let's put together a list of the different ways to make an Excel add-in with .NET:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"VSTO"),(0,i.kt)("li",{parentName:"ul"},"COM add-in"),(0,i.kt)("li",{parentName:"ul"},"C API"),(0,i.kt)("li",{parentName:"ul"},"Other libraries - NetOffice, Add-In Express, FCell.")),(0,i.kt)("p",null,"Finally, where does Excel-DNA fit in? Excel-DNA brings together all three parts we need to make a great Excel add-in with .NET - the native Excel C API, the COM object model and the .NET runtime."),(0,i.kt)("h3",{id:"shouldnt-i-just-stick-to-the-official-microsoft-tools-for-making-excel-add-ins-rather-than-relying-on-a-third-party-tool"},"Shouldn't I just stick to the official Microsoft tools for making Excel add-ins, rather than relying on a third-party tool?"),(0,i.kt)("p",null,"Using only the Microsoft tools, it has been hard to make powerful and full-featured Excel add-ins with .NET, that work in different Excel versions, and are easy to deploy. Some of the problems are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Microsoft has no official support for using the native Excel C API in .NET add-ins"),(0,i.kt)("li",{parentName:"ul"},"VSTO has no support for making user-defined worksheet functions"),(0,i.kt)("li",{parentName:"ul"},"Automation add-ins can provide UDF, but have poor performance, and allow limited customization"),(0,i.kt)("li",{parentName:"ul"},"VSTO and regular COM-based add-ins require administrative rights to install")),(0,i.kt)("p",null,"What if I want to make an Excel add-in with Python, C or C++?"),(0,i.kt)("p",null,"Excel-DNA is used for making Excel add-ins with .NET. There are similar libraries that integrate with the native Excel C API, for making add-ins with other languages."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Python: PyXLL"),(0,i.kt)("li",{parentName:"ul"},"C/C++: Xlw, XLL+"),(0,i.kt)("li",{parentName:"ul"},"Modern C++: xll8.")),(0,i.kt)("h3",{id:"what-about-vba-can-excel-dna-help-me-use-my-vba-skills-and-still-move-to-net"},"What about VBA? Can Excel-DNA help me use my VBA skills and still move to .NET?"),(0,i.kt)("p",null,"VB.NET is the newest member of the Visual Basic family. While sometimes overshadowed in popularity by C#, VB.NET is as powerful as C# (sometimes more!), can access all the same .NET libraries, and is fully supported for making Excel-DNA add-ins. While VB.NET gives a familiar syntax if you're coming from VBA, there are still a few changes that you need to get used to. But rest assured that VB.NET gives you access to the full power of .NET and Excel-DNA."),(0,i.kt)("p",null,"Excel-DNA add-ins can also integrate with VBA code by creating your own COM libraries that can be called from VBA. One advantage in putting these libraries inside an Excel-DNA add-in is that they can be deployed without requiring registration with administrator privileges."))}u.isMDXComponent=!0}}]);