"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[4294],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,g=u["".concat(i,".").concat(d)]||u[d]||f[d]||c;return n?r.createElement(g,s(s({ref:t},p),{},{components:n})):r.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,s=new Array(c);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<c;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2101:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const c={title:"Accepting Range Parameters in UDFs"},s=void 0,o={unversionedId:"guides-basic/accepting-range-parameters-in-udfs",id:"guides-basic/accepting-range-parameters-in-udfs",title:"Accepting Range Parameters in UDFs",description:"Parameters with the type of Excel's Range COM object are not directly supported by Excel-DNA.  There is a list of allowed parameter types here: Reference for data types in UDFs",source:"@site/docs/guides-basic/accepting-range-parameters-in-udfs.md",sourceDirName:"guides-basic",slug:"/guides-basic/accepting-range-parameters-in-udfs",permalink:"/docs/guides-basic/accepting-range-parameters-in-udfs",draft:!1,tags:[],version:"current",frontMatter:{title:"Accepting Range Parameters in UDFs"},sidebar:"tutorialSidebar",previous:{title:"IntelliSense",permalink:"/docs/guides-basic/Intellisense"},next:{title:"Asynchronous Functions",permalink:"/docs/guides-basic/asynchronous-functions"}},i={},l=[],p={toc:l},u="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Parameters with the type of Excel's Range COM object are not directly supported by Excel-DNA.  There is a list of allowed parameter types here: ",(0,a.kt)("a",{parentName:"p",href:"../../../reference-data-type-marshalling"},"Reference for data types in UDFs")),(0,a.kt)("p",null,"If you want the function to also accept a sheet reference, your parameter should be of type 'object' and marked with an <ExcelArgument(AllowReference:=true)> attribute. In that case you'll get an object of type ExcelDna.Integration.ExcelReference if the function is called with a sheet reference."),(0,a.kt)("p",null,"ExcelReference is not the same as the COM Range type, it is a small wrapper type for the Excel C API reference structure. From the ExcelReference it is possible to get a COM Range -"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-vb"},'Imports ExcelDna.Integration.XlCall\n...\nPrivate Function ReferenceToRange(ByVal xlRef As ExcelReference) As Object\n    Dim cntRef As Long, strText As String, strAddress As String\n    strAddress = Excel(xlfReftext, xlRef.InnerReferences(0), True)\n    For cntRef = 1 To xlRef.InnerReferences.Count - 1\n        strText = Excel(xlfReftext, xlRef.InnerReferences(cntRef), True)\n        strAddress = strAddress & "," & Mid(strText, strText.LastIndexOf("!") + 2) \' +2 because IndexOf starts at 0\n    Next\n    ReferenceToRange = ExcelDnaUtil.Application.Range(strAddress)\nEnd Function\n')),(0,a.kt)("p",null,"The internal xlfReftext call in ReferenceToRange can only be made from functions that are registered as a macro-sheet functions. For this the exported function will need to be marked as IsMacroType:=True."),(0,a.kt)("p",null,"So a function that can accept a sheet reference, and process these as a COM Range object, might look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-vb"},'<ExcelFunction(IsMacroType:=True)> _\nPublic Shared Function GetAddress(<ExcelArgument(AllowReference:=true)> ByVal arg As Object) As String\n    Dim range As Object\n    If TypeOf arg Is ExcelReference Then\n        range = ReferenceToRange(arg)\n        Return range.Address(False, False)\n    Else\n        Return "!!! Not a sheet reference"\n    End If\nEnd Function\n')))}f.isMDXComponent=!0}}]);