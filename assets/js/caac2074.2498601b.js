"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[7295],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),o=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=o(t.components);return a.createElement(s.Provider,{value:e},t.children)},c="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,p=u(t,["components","mdxType","originalType","parentName"]),c=o(n),m=r,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return n?a.createElement(g,i(i({ref:e},p),{},{components:n})):a.createElement(g,i({ref:e},p))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=m;var u={};for(var s in e)hasOwnProperty.call(e,s)&&(u[s]=e[s]);u.originalType=t,u[c]="string"==typeof t?t:r,i[1]=u;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},497:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const l={title:"Extended Registration"},i=void 0,u={unversionedId:"guides-basic/extended-registration",id:"guides-basic/extended-registration",title:"Extended Registration",description:"Nullable parameter",source:"@site/docs/guides-basic/extended-registration.md",sourceDirName:"guides-basic",slug:"/guides-basic/extended-registration",permalink:"/docs/guides-basic/extended-registration",draft:!1,tags:[],version:"current",frontMatter:{title:"Extended Registration"},sidebar:"tutorialSidebar",previous:{title:".NET runtime support",permalink:"/docs/guides-basic/dotnet-runtime-support"},next:{title:"Installing Your Add-in",permalink:"/docs/guides-basic/installing-your-add-in"}},s={},o=[{value:"Nullable parameter",id:"nullable-parameter",level:2},{value:"Optional parameter",id:"optional-parameter",level:2},{value:"Range parameter",id:"range-parameter",level:2},{value:"Enums parameter and return value",id:"enums-parameter-and-return-value",level:2},{value:"String array parameter",id:"string-array-parameter",level:2},{value:"String array 2D parameter",id:"string-array-2d-parameter",level:2},{value:"params parameter",id:"params-parameter",level:2},{value:"Async functions and tasks",id:"async-functions-and-tasks",level:2},{value:"Object handles",id:"object-handles",level:2},{value:"User defined parameter conversions",id:"user-defined-parameter-conversions",level:2},{value:"Function execution handler",id:"function-execution-handler",level:2},{value:"Function registration processing",id:"function-registration-processing",level:2}],p={toc:o},c="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"nullable-parameter"},"Nullable parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[ExcelFunction]\npublic static string NullableDouble(double? d)\n{\n    return "Nullable VAL: " + (d.HasValue ? d : "NULL");\n}\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cell"),(0,r.kt)("th",{parentName:"tr",align:null},"Formula"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A1"),(0,r.kt)("td",{parentName:"tr",align:null},"=NullableDouble(1.2)"),(0,r.kt)("td",{parentName:"tr",align:null},"Nullable VAL: 1.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A2"),(0,r.kt)("td",{parentName:"tr",align:null},"=NullableDouble()"),(0,r.kt)("td",{parentName:"tr",align:null},"Nullable VAL: NULL")))),(0,r.kt)("h2",{id:"optional-parameter"},"Optional parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[ExcelFunction]\npublic static string OptionalDouble(double d = 1.23)\n{\n    return "Optional VAL: " + d.ToString();\n}\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cell"),(0,r.kt)("th",{parentName:"tr",align:null},"Formula"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A1"),(0,r.kt)("td",{parentName:"tr",align:null},"=OptionalDouble(2.3)"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional VAL: 2.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A2"),(0,r.kt)("td",{parentName:"tr",align:null},"=OptionalDouble()"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional VAL: 1.23")))),(0,r.kt)("h2",{id:"range-parameter"},"Range parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[ExcelFunction]\npublic static string Range(Microsoft.Office.Interop.Excel.Range r)\n{\n    return r.Address;\n}\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cell"),(0,r.kt)("th",{parentName:"tr",align:null},"Formula"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A1"),(0,r.kt)("td",{parentName:"tr",align:null},"=Range(B2)"),(0,r.kt)("td",{parentName:"tr",align:null},"$B$2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A2"),(0,r.kt)("td",{parentName:"tr",align:null},"=Range(B2:C4)"),(0,r.kt)("td",{parentName:"tr",align:null},"$B$2:$C$4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A3"),(0,r.kt)("td",{parentName:"tr",align:null},"=Range((B2,D5:E6))"),(0,r.kt)("td",{parentName:"tr",align:null},"$B$2,$D$5:$E$6")))),(0,r.kt)("h2",{id:"enums-parameter-and-return-value"},"Enums parameter and return value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[ExcelFunction]\npublic static string Enum(DateTimeKind e)\n{\n    return "Enum VAL: " + e.ToString();\n}\n\n[ExcelFunction]\npublic static DateTimeKind EnumReturn(string s)\n{\n    return Enum.Parse<DateTimeKind>(s);\n}\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cell"),(0,r.kt)("th",{parentName:"tr",align:null},"Formula"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A1"),(0,r.kt)("td",{parentName:"tr",align:null},'=Enum("Unspecified")'),(0,r.kt)("td",{parentName:"tr",align:null},"Enum VAL: Unspecified")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A2"),(0,r.kt)("td",{parentName:"tr",align:null},'=Enum("Local")'),(0,r.kt)("td",{parentName:"tr",align:null},"Enum VAL: Local")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A3"),(0,r.kt)("td",{parentName:"tr",align:null},"=Enum(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Enum VAL: Utc")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A4"),(0,r.kt)("td",{parentName:"tr",align:null},'=EnumReturn("Unspecified")'),(0,r.kt)("td",{parentName:"tr",align:null},"Unspecified")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A5"),(0,r.kt)("td",{parentName:"tr",align:null},'=EnumReturn("Local")'),(0,r.kt)("td",{parentName:"tr",align:null},"Local")))),(0,r.kt)("h2",{id:"string-array-parameter"},"String array parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[ExcelFunction]\npublic static string StringArray(string[] s)\n{\n    return "StringArray VALS: " + string.Concat(s);\n}\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cell"),(0,r.kt)("th",{parentName:"tr",align:null},"Formula"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A1"),(0,r.kt)("td",{parentName:"tr",align:null},"01"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A2"),(0,r.kt)("td",{parentName:"tr",align:null},"2.30"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A3"),(0,r.kt)("td",{parentName:"tr",align:null},"World"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"B1"),(0,r.kt)("td",{parentName:"tr",align:null},"=StringArray(A1:A3)"),(0,r.kt)("td",{parentName:"tr",align:null},"StringArray VALS: 12.3World")))),(0,r.kt)("h2",{id:"string-array-2d-parameter"},"String array 2D parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[ExcelFunction]\npublic static string StringArray2D(string[,] s)\n{\n    string result = "";\n    for (int i = 0; i < s.GetLength(0); i++)\n    {\n        for (int j = 0; j < s.GetLength(1); j++)\n        {\n            result += s[i, j];\n        }\n\n        result += " ";\n    }\n\n    return $"StringArray2D VALS: {result}";\n}\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cell"),(0,r.kt)("th",{parentName:"tr",align:null},"Formula"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A1"),(0,r.kt)("td",{parentName:"tr",align:null},"01"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A2"),(0,r.kt)("td",{parentName:"tr",align:null},"2.30"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A3"),(0,r.kt)("td",{parentName:"tr",align:null},"Hello"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"B1"),(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"B2"),(0,r.kt)("td",{parentName:"tr",align:null},"6.7"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"B3"),(0,r.kt)("td",{parentName:"tr",align:null},"World"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"C1"),(0,r.kt)("td",{parentName:"tr",align:null},"=StringArray2D(A1:B3)"),(0,r.kt)("td",{parentName:"tr",align:null},"StringArray2D VALS: 15 2.36.7 HelloWorld")))),(0,r.kt)("h2",{id:"params-parameter"},"params parameter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[ExcelFunction]\npublic static string ParamsFunc1(\n    [ExcelArgument(Name = "first.Input", Description = "is a useful start")]\n    object input,\n    [ExcelArgument(Description = "is another param start")]\n    string QtherInpEt,\n    [ExcelArgument(Name = "Value", Description = "gives the Rest")]\n    params object[] args)\n{\n    return input + "," + QtherInpEt + ", : " + args.Length;\n}\n\n[ExcelFunction]\npublic static string ParamsFunc2(\n    [ExcelArgument(Name = "first.Input", Description = "is a useful start")]\n    object input,\n    [ExcelArgument(Name = "second.Input", Description = "is some more stuff")]\n    string input2,\n    [ExcelArgument(Description = "is another param ")]\n    string QtherInpEt,\n    [ExcelArgument(Name = "Value", Description = "gives the Rest")]\n    params object[] args)\n{\n    var content = string.Join(",", args.Select(ValueType => ValueType.ToString()));\n    return input + "," + input2 + "," + QtherInpEt + ", " + $"[{args.Length}: {content}]";\n}\n\n[ExcelFunction]\npublic static string ParamsJoinString(string separator, params string[] values)\n{\n    return String.Join(separator, values);\n}\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cell"),(0,r.kt)("th",{parentName:"tr",align:null},"Formula"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A1"),(0,r.kt)("td",{parentName:"tr",align:null},'=ParamsFunc1(1,\\"2\\",4,5)'),(0,r.kt)("td",{parentName:"tr",align:null},"1,2, : 2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A2"),(0,r.kt)("td",{parentName:"tr",align:null},'=ParamsFunc2(\\"a\\",,\\"c\\",\\"d\\",,\\"f\\")'),(0,r.kt)("td",{parentName:"tr",align:null},"a,,c, ","[3: d,ExcelDna.Integration.ExcelMissing,f]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A3"),(0,r.kt)("td",{parentName:"tr",align:null},'=ParamsJoinString(\\"//\\",\\"5\\",\\"4\\",\\"3\\")'),(0,r.kt)("td",{parentName:"tr",align:null},"5//4//3")))),(0,r.kt)("h2",{id:"async-functions-and-tasks"},"Async functions and tasks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[ExcelAsyncFunction]\npublic static string AsyncHello(string name, int msToSleep)\n{\n    return $"Hello async {name}";\n}\n\n[ExcelAsyncFunction]\npublic static async Task<string> AsyncTaskHello(string name, int msDelay)\n{\n    await Task.Delay(msDelay);\n    return $"Hello async task {name}";\n}\n\n[ExcelFunction]\npublic static Task<string> TaskHello(string name)\n{\n    return Task.FromResult($"Hello task {name}");\n}\n')),(0,r.kt)("h2",{id:"object-handles"},"Object handles"),(0,r.kt)("p",null,"Create and reuse .NET objects:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Calc\n{\n    private double d1, d2;\n\n    public Calc(double d1, double d2)\n    {\n        this.d1 = d1;\n        this.d2 = d2;\n    }\n\n    public double Sum()\n    {\n        return d1 + d2;\n    }\n}\n\n[ExcelFunction]\npublic static Calc CreateCalc(double d1, double d2)\n{\n    return new Calc(d1, d2);\n}\n\n[ExcelFunction]\npublic static double CalcSum(Calc c)\n{\n    return c.Sum();\n}\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cell"),(0,r.kt)("th",{parentName:"tr",align:null},"Formula"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A1"),(0,r.kt)("td",{parentName:"tr",align:null},"=CreateCalc(1.2, 3.4)"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A2"),(0,r.kt)("td",{parentName:"tr",align:null},"=CalcSum(A1)"),(0,r.kt)("td",{parentName:"tr",align:null},"4.6")))),(0,r.kt)("p",null,"Thread safe creation and use is supported:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"[ExcelFunction(IsThreadSafe = true)]\npublic static Calc CreateCalcTS(double d1, double d2)\n{\n    return new Calc(d1, d2);\n}\n\n[ExcelFunction(IsThreadSafe = true)]\npublic static double CalcSumTS(Calc c)\n{\n    return c.Sum();\n}\n")),(0,r.kt)("p",null,"Object resources are automatically disposed when no longer used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class DisposableObject : IDisposable\n{\n    public static int ObjectsCount { get; private set; } = 0;\n    private bool disposedValue;\n\n    public DisposableObject()\n    {\n        ++ObjectsCount;\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!disposedValue)\n        {\n            if (disposing)\n            {\n                --ObjectsCount;\n            }\n\n            disposedValue = true;\n        }\n    }\n\n    public void Dispose()\n    {\n        Dispose(disposing: true);\n        GC.SuppressFinalize(this);\n    }\n}\n\n[ExcelFunction]\npublic static DisposableObject CreateDisposableObject(int x)\n{\n    return new DisposableObject();\n}\n")),(0,r.kt)("h2",{id:"user-defined-parameter-conversions"},"User defined parameter conversions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class TestType1\n{\n    public string Value;\n\n    public TestType1(string value)\n    {\n        Value = value;\n    }\n}\n\npublic class TestType2\n{\n    public string Value;\n\n    public TestType2(string value)\n    {\n        Value = value;\n    }\n}\n\n[ExcelParameterConversion]\npublic static TestType2 Order1ToTestType2FromTestType1(TestType1 value)\n{\n    return new TestType2("From TestType1 " + value.Value);\n}\n\n[ExcelParameterConversion]\npublic static TestType1 Order2ToTestType1(string value)\n{\n    return new TestType1(value);\n}\n\n[ExcelParameterConversion]\npublic static TestType1 Order3ToTestType1Also(string value)\n{\n    return new TestType1("Also " + value);\n}\n\n[ExcelParameterConversion]\npublic static Version ToVersion(string s)\n{\n    return new Version(s);\n}\n\n[ExcelFunction]\npublic static string TestType1(TestType1 tt)\n{\n    return "The TestType1 value is " + tt.Value;\n}\n\n[ExcelFunction]\npublic static string TestType2(TestType2 tt)\n{\n    return "The TestType2 value is " + tt.Value;\n}\n\n[ExcelFunction]\npublic static string Version2(Version v)\n{\n    return "The Version value with field count 2 is " + v.ToString(2);\n}\n')),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Cell"),(0,r.kt)("th",{parentName:"tr",align:null},"Formula"),(0,r.kt)("th",{parentName:"tr",align:null},"Result"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A1"),(0,r.kt)("td",{parentName:"tr",align:null},'=Version2("4.3.2.1")'),(0,r.kt)("td",{parentName:"tr",align:null},"The Version value with field count 2 is 4.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A2"),(0,r.kt)("td",{parentName:"tr",align:null},'=TestType1("world")'),(0,r.kt)("td",{parentName:"tr",align:null},"The TestType1 value is world")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"A3"),(0,r.kt)("td",{parentName:"tr",align:null},'=TestType2("world2")'),(0,r.kt)("td",{parentName:"tr",align:null},"The TestType2 value is From TestType1 world2")))),(0,r.kt)("p",null,"User defined parameter conversions are sorted alphabetically by function name. "),(0,r.kt)("p",null,"More complex type conversions (like ",(0,r.kt)("inlineCode",{parentName:"p"},"TestType2 Order1ToTestType2FromTestType1(TestType1 value)"),") should be ordered before simpler type conversions they dependent on (like ",(0,r.kt)("inlineCode",{parentName:"p"},"TestType1 Order2ToTestType1(string value)"),"). "),(0,r.kt)("p",null,"Subsequent multiple conversions for the same type (like ",(0,r.kt)("inlineCode",{parentName:"p"},"TestType1 Order3ToTestType1Also(string value)"),") are ignored and the first one (like ",(0,r.kt)("inlineCode",{parentName:"p"},"TestType1 Order2ToTestType1(string value)"),") is used."),(0,r.kt)("h2",{id:"function-execution-handler"},"Function execution handler"),(0,r.kt)("p",null,"Monitor Excel functions execution with a custom handler, marked with ",(0,r.kt)("inlineCode",{parentName:"p"},"ExcelFunctionExecutionHandlerSelector")," attribute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'internal class FunctionLoggingHandler : FunctionExecutionHandler\n{\n    public int? ID { get; set; }\n\n    public override void OnEntry(FunctionExecutionArgs args)\n    {\n        // FunctionExecutionArgs gives access to the function name and parameters,\n        // and gives some options for flow redirection.\n\n        // Tag will flow through the whole handler\n        if (ID.HasValue)\n            args.Tag = $"ID={ID.Value} ";\n        else\n            args.Tag = "";\n        args.Tag += args.FunctionName;\n\n        Logger.Log($"{args.Tag} - OnEntry - Args: {args.Arguments.Select(arg => arg.ToString())}");\n    }\n\n    public override void OnSuccess(FunctionExecutionArgs args)\n    {\n        Logger.Log($"{args.Tag} - OnSuccess - Result: {args.ReturnValue}");\n    }\n\n    public override void OnException(FunctionExecutionArgs args)\n    {\n        Logger.Log($"{args.Tag} - OnException - Message: {args.Exception}");\n    }\n\n    public override void OnExit(FunctionExecutionArgs args)\n    {\n        Logger.Log($"{args.Tag} - OnExit");\n    }\n\n    [ExcelFunctionExecutionHandlerSelector]\n    public static IFunctionExecutionHandler LoggingHandlerSelector(IExcelFunctionInfo functionInfo)\n    {\n        if (functionInfo.CustomAttributes.OfType<LoggingAttribute>().Any())\n        {\n            var loggingAtt = functionInfo.CustomAttributes.OfType<LoggingAttribute>().First();\n            return new FunctionLoggingHandler { ID = loggingAtt.ID };\n        }\n\n        return new FunctionLoggingHandler();\n    }\n}\n')),(0,r.kt)("p",null,"The default return value for async functions that are in process is #N/A. You can, for example, return the newer #GETTING_DATA error code creating the following function execution handler:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"internal class AsyncReturnHandler : FunctionExecutionHandler\n{\n    public override void OnSuccess(FunctionExecutionArgs args)\n    {\n        if (args.ReturnValue.Equals(ExcelError.ExcelErrorNA))\n            args.ReturnValue = ExcelError.ExcelErrorGettingData;\n    }\n\n    [ExcelFunctionExecutionHandlerSelector]\n    public static IFunctionExecutionHandler AsyncReturnHandlerSelector(IExcelFunctionInfo functionInfo)\n    {\n        return new AsyncReturnHandler();\n    }\n}\n")),(0,r.kt)("h2",{id:"function-registration-processing"},"Function registration processing"),(0,r.kt)("p",null,"You can implement custom function wrappers during registration using ",(0,r.kt)("inlineCode",{parentName:"p"},"ExcelFunctionProcessor")," attribute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface IExcelFunctionInfo\n{\n    ExcelFunctionAttribute FunctionAttribute { get; }\n    List<IExcelFunctionParameter> Parameters { get; }\n    IExcelFunctionReturn Return { get; }\n    List<object> CustomAttributes { get; }\n\n    LambdaExpression FunctionLambda { get; set; }\n}\n\n[ExcelFunctionProcessor]\npublic static IEnumerable<IExcelFunctionInfo> ProcessFunctions(IEnumerable<IExcelFunctionInfo> registrations, IExcelFunctionRegistrationConfiguration config)\n")))}d.isMDXComponent=!0}}]);