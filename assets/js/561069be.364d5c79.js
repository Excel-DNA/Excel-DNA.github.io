"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[2626],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=d(e,["components","mdxType","originalType","parentName"]),g=s(n),p=i,h=g["".concat(l,".").concat(p)]||g[p]||c[p]||a;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:i,o[1]=d;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},402:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={title:"Debugging Addins and Excel-DNA"},o=void 0,d={unversionedId:"archive/guides/debugging-addins-and-exceldna",id:"archive/guides/debugging-addins-and-exceldna",title:"Debugging Addins and Excel-DNA",description:"Debugging user code in your add-in",source:"@site/docs/archive/guides/debugging-addins-and-exceldna.md",sourceDirName:"archive/guides",slug:"/archive/guides/debugging-addins-and-exceldna",permalink:"/TestDocs/docs/archive/guides/debugging-addins-and-exceldna",draft:!1,tags:[],version:"current",frontMatter:{title:"Debugging Addins and Excel-DNA"},sidebar:"tutorialSidebar",previous:{title:"Customizing Ribbons",permalink:"/TestDocs/docs/archive/guides/customizing-ribbons"},next:{title:"Detecting Excel Shutdown and AutoClose",permalink:"/TestDocs/docs/archive/guides/detecting-excel-shutdown-and-autoclose"}},l={},s=[{value:"Debugging user code in your add-in",id:"debugging-user-code-in-your-add-in",level:2},{value:"Debugging the Excel-DNA integration libraries",id:"debugging-the-excel-dna-integration-libraries",level:2}],u={toc:s};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"debugging-user-code-in-your-add-in"},"Debugging user code in your add-in"),(0,i.kt)("p",null,"I don't usually have issues debugging the managed add-in's user-defined functions and commands."),(0,i.kt)("p",null,"There is a trick needed to set  up the debugging when using the Express editions - the project file must be edited by hand to set the native executable to run. This is discussed here: ",(0,i.kt)("a",{parentName:"p",href:"https://groups.google.com/group/exceldna/browse_thread/thread/6767ac80f2bb3f11"},"https://groups.google.com/group/exceldna/browse_thread/thread/6767ac80f2bb3f11"),"."),(0,i.kt)("h2",{id:"debugging-the-excel-dna-integration-libraries"},"Debugging the Excel-DNA integration libraries"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This is from a discussion on the Google group - ",(0,i.kt)("a",{parentName:"em",href:"https://groups.google.com/group/exceldna/browse_frm/thread/b2d93b2e5e986bbd"},"https://groups.google.com/group/exceldna/browse_frm/thread/b2d93b2e5e986bbd"))),(0,i.kt)("p",null,"Debugging the managed Excel-DNA integration libraries can be a bit tricky sometimes."),(0,i.kt)("p",null,"When recompiling (only for the Debug - Win32 configuration), you'll see the ",(0,i.kt)("inlineCode",{parentName:"p"},"ExcelDna.Loader.dll")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ExcelDna.Integration.dll")," copied to the output (",(0,i.kt)("inlineCode",{parentName:"p"},"Source\\ExcelDna\\Debug"),") directory. Then, when the add-in is loaded from there, these assemblies are loaded from the files and not the packed versions. So you need not fiddle with the packing for the debugging to work - you just need those assemblies as files next to the .xll - then the files are loaded and the packed versions ignored. They have to be up-to-date  though, else the debugger won't match your code with the loaded .dlls."),(0,i.kt)("p",null,"The following works for me:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Make sure you rebuild everything - when you set up 'ExcelDna.Integration' for debugging, the ExcelDna project might not rebuild, so the ExcelDna.Integration in the (",(0,i.kt)("inlineCode",{parentName:"p"},"Source\\ExcelDna\\Debug"),") directory might not be updated. When in doubt I just press Build->Batch Build->Rebuild All, and then I'm sure it's OK.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"I start Excel on its own, then attach the debugger, then load the add-in. This seems more reliable than starting the debugger")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Another trick I have use sometimes is to put a ",(0,i.kt)("inlineCode",{parentName:"p"},"Debug.Assert(false)")," somewhere in the loading path - this allows you to select the debugger when the assertion failure breaks the process."))))}c.isMDXComponent=!0}}]);