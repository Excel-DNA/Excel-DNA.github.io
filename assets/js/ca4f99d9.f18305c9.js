"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[311],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>d});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),s=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),f=s(t),d=a,y=f["".concat(c,".").concat(d)]||f[d]||p[d]||l;return t?n.createElement(y,o(o({ref:r},u),{},{components:t})):n.createElement(y,o({ref:r},u))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=f;var i={};for(var c in r)hasOwnProperty.call(r,c)&&(i[c]=r[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},960:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=t(7462),a=(t(7294),t(3905));const l={title:"Returning 1-D Arrays"},o=void 0,i={unversionedId:"archive/guides/returning-1-d-arrays",id:"archive/guides/returning-1-d-arrays",title:"Returning 1-D Arrays",description:"By default, ExcelDna marshalls object[] (a 1D array) back to Excel as a 1 row, many column result.",source:"@site/docs/archive/guides/returning-1-d-arrays.md",sourceDirName:"archive/guides",slug:"/archive/guides/returning-1-d-arrays",permalink:"/TestDocs/docs/archive/guides/returning-1-d-arrays",draft:!1,tags:[],version:"current",frontMatter:{title:"Returning 1-D Arrays"},sidebar:"tutorialSidebar",previous:{title:"Reactive Extensions for Excel",permalink:"/TestDocs/docs/archive/guides/reactive-extensions-for-excel"},next:{title:"User Settings and the .xll.config File",permalink:"/TestDocs/docs/archive/guides/user-settings-and-the-xllconfig-file"}},c={},s=[],u={toc:s};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"By default, ExcelDna marshalls ",(0,a.kt)("inlineCode",{parentName:"p"},"object[]")," (a 1D array) back to Excel as a 1 row, many column result."),(0,a.kt)("p",null,"This will lead to unexpected results when someone tries to call an array function from a vertical range of cells. For example, if you call a function that returns the array {",(0,a.kt)("inlineCode",{parentName:"p"},"a,b,c}")," from three vertical cells, then the cells will show a, a, and a. If you call the function from a horizontal range, then you will see a, b, and c."),(0,a.kt)("p",null,"If you want an array function that is usable in both horizontal AND vertical mode, then you may want to apply a helper function like this to your 1D result (and return the result ",(0,a.kt)("inlineCode",{parentName:"p"},"PackForCaller")," from your ",(0,a.kt)("inlineCode",{parentName:"p"},"ExcelFunction"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"public static object PackForCaller(object[] vs)\n{\n    var caller = (ExcelReference)XlCall.Excel;\n    var rows = caller.RowLast-caller.RowFirst + 1;\n    var columns = caller.ColumnLast-caller.ColumnFirst + 1;\n\n    if(columns >= rows)\n    {\n        return vs;\n    }\n\n    var count = vs.Length;\n    var vs2 = new object[count, 1];\n\n    for(var i = 0; i < count; i++)\n    {\n        vs2[i, 0] = vs[i];\n    }\n\n    return vs2;\n}\n")),(0,a.kt)("p",null,"If the caller is a vertical range, then this will return a 2D array with dimensions of ",(0,a.kt)("inlineCode",{parentName:"p"},"[count, 1]"),", which will be marshalled back properly to the vertical range of cells."))}p.isMDXComponent=!0}}]);