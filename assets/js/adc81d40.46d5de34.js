"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[4306],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=d(n),p=i,f=m["".concat(l,".").concat(p)]||m[p]||u[p]||a;return n?o.createElement(f,r(r({ref:t},c),{},{components:n})):o.createElement(f,r({ref:t},c))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var d=2;d<a;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},702:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=n(7462),i=(n(7294),n(3905));const a={title:"Utilising CustomXMLParts in Excel Workbooks"},r=void 0,s={unversionedId:"archive/guides/utilising-customXMLparts-in-excel-workbooks",id:"archive/guides/utilising-customXMLparts-in-excel-workbooks",title:"Utilising CustomXMLParts in Excel Workbooks",description:"After struggling with the limitations of custom docproperties (being generally much too short), I decided to focus on a technology that was introduced with Office 2007:",source:"@site/docs/archive/guides/utilising-customXMLparts-in-excel-workbooks.md",sourceDirName:"archive/guides",slug:"/archive/guides/utilising-customXMLparts-in-excel-workbooks",permalink:"/Website/docs/archive/guides/utilising-customXMLparts-in-excel-workbooks",draft:!1,tags:[],version:"current",frontMatter:{title:"Utilising CustomXMLParts in Excel Workbooks"},sidebar:"tutorialSidebar",previous:{title:"User Settings and the .xll.config File",permalink:"/Website/docs/archive/guides/user-settings-and-the-xllconfig-file"},next:{title:"Getting Started with Excel-DNA",permalink:"/Website/docs/archive/getting-started"}},l={},d=[{value:"CustomXMLParts Usage",id:"customxmlparts-usage",level:2},{value:"Adding sub elements",id:"adding-sub-elements",level:3},{value:"Retrieving elements",id:"retrieving-elements",level:3},{value:"Iterating through nodes",id:"iterating-through-nodes",level:3}],c={toc:d};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"After struggling with the limitations of custom docproperties (being generally much too short), I decided to focus on a technology that was introduced with Office 2007:\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/office/vba/api/office.customxmlparts"},"CustomXmlParts")),(0,i.kt)("p",null,"CustomXmlParts allow you to store any arbitrary XML document in your Workbook (or Word document or Powerpoint presentation) being not visible to the end-user in the document itself."),(0,i.kt)("p",null,"In the following sample, I show some CustomXMLParts handling techniques from my ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/rkapl123/DBAddin"},"DB-Addin"),"."),(0,i.kt)("p",null,"In my Addin, I use CustomXMLParts as an advanced storage for Database modifier definitions (for writing Excel Data to a Database table (DBMapper), doing DML Statements such as insert/update/delete (DBAction) and executing sequences of DBMappers and DBActions (DB Sequence))."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Excel-DNA/Samples/tree/master/CustomXMLParts"},"Sample")," only contains creating and viewing/editing DBMapper Definitions in a stripped down class (all in one) without any other meaningful action code to concentrate on the usage of CustomXMLParts. Besides that, the usage of validating the XML against an existing schema is demonstrated as well."),(0,i.kt)("h2",{id:"customxmlparts-usage"},"CustomXMLParts Usage"),(0,i.kt)("p",null,"All CustomXMLParts Objects are found in the namespace ",(0,i.kt)("inlineCode",{parentName:"p"},"Microsoft.Office.Core"),", referenced by the Office.dll within Exceldna.Interop.  "),(0,i.kt)("p",null,"Fetching an existing CustomXMLParts XML document is done by selecting the required namespace:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vbnet"},'        Dim CustomXmlParts As Object = ExcelDnaUtil.Application.ActiveWorkbook.CustomXMLParts.SelectByNamespace("DBModifDef")\n')),(0,i.kt)("p",null,"Adding the XML document if the namespace doesn't yet exist (in a new workbook) is done by adding the root element:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vbnet"},'        If CustomXmlParts.Count = 0 Then\n            \' in case no CustomXmlPart in Namespace DBModifDef exists in the workbook, add one\n            ExcelDnaUtil.Application.ActiveWorkbook.CustomXMLParts.Add("<root xmlns=""DBModifDef""></root>")\n            CustomXmlParts = ExcelDnaUtil.Application.ActiveWorkbook.CustomXMLParts.SelectByNamespace("DBModifDef")\n        End If\n')),(0,i.kt)("h3",{id:"adding-sub-elements"},"Adding sub elements"),(0,i.kt)("p",null,"Sub elements are added with the Methond ",(0,i.kt)("inlineCode",{parentName:"p"},"AppendChildNode")," of the selected node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vbnet"},'        \' NamespaceURI:="DBModifDef" is required to avoid adding a xmlns attribute to each element.\n        CustomXmlParts(1).SelectSingleNode("/ns0:root").AppendChildNode(createdDBModifType, NamespaceURI:="DBModifDef")\n')),(0,i.kt)("p",null,"The appended child element is placed last, to append further child elements, you need to call ",(0,i.kt)("inlineCode",{parentName:"p"},"LastChild")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vbnet"},'        Dim dbModifNode As CustomXMLNode = CustomXmlParts(1).SelectSingleNode("/ns0:root").LastChild\n        \' append the detailed settings to the definition element\n        dbModifNode.AppendChildNode("Name", NodeType:=MsoCustomXMLNodeType.msoCustomXMLNodeAttribute, NodeValue:=createdDBModifType + Guid.NewGuid().ToString())\n        dbModifNode.AppendChildNode("execOnSave", NamespaceURI:="DBModifDef", NodeValue:="True")\n        dbModifNode.AppendChildNode("askBeforeExecute", NamespaceURI:="DBModifDef", NodeValue:="True")\n')),(0,i.kt)("h3",{id:"retrieving-elements"},"Retrieving elements"),(0,i.kt)("p",null,"When retrieving element values, it's a good idea to check for the count of nodes contained to avoid exceptions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vbnet"},'        Dim nodeCount As Integer = definitionXML.SelectNodes("ns0:" + nodeName).Count\n        If nodeCount = 0 Then\n            getParamFromXML = "" \' optional nodes become empty strings\n        Else\n            getParamFromXML = definitionXML.SelectSingleNode("ns0:" + nodeName).Text\n        End If\n')),(0,i.kt)("h3",{id:"iterating-through-nodes"},"Iterating through nodes"),(0,i.kt)("p",null,"When iterating through nodes you take the ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildNodes")," method of the (root) node object and us ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseName"),' of the iterator variable (node object) to get it\'s element name.\nHere the name is usually in the (one and only) attribute "name" of the element, so if that exists, it is taken as the nodes name.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-vbnet"},'    For Each customXMLNodeDef As CustomXMLNode In CustomXmlParts(1).SelectSingleNode("/ns0:root").ChildNodes\n        Dim DBModiftype As String = Left(customXMLNodeDef.BaseName, 8)\n        If DBModiftype = "DBSeqnce" Or DBModiftype = "DBMapper" Or DBModiftype = "DBAction" Then\n            Dim nodeName As String\n            If customXMLNodeDef.Attributes.Count > 0 Then\n                nodeName = customXMLNodeDef.Attributes(1).Text\n            Else\n                nodeName = customXMLNodeDef.BaseName + "unknown"\n            End If\n\n            \' finally create the DBModif Object and fill parameters into CustomXMLPart:\n            Dim newDBModif As DBModif = New DBModif(customXMLNodeDef, DBModiftype)\n')))}u.isMDXComponent=!0}}]);