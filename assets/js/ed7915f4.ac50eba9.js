"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[4725],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={title:"Performing Asynchronous Work"},i=void 0,s={unversionedId:"guides-advanced/performing-asynchronous-work",id:"guides-advanced/performing-asynchronous-work",title:"Performing Asynchronous Work",description:"It is important to only communicate with Excel when it is Ready. For example, if one displays a non modal dialog then the program may fail if it attempts to call a VBA routine in response to a button press while the user is also in the process of editing a cell. Intercepting Window Messages messages etc. can also produce errors even though they are on the main thread. And of course accessing Excel from a different thread is forbidden.",source:"@site/docs/guides-advanced/performing-asynchronous-work.md",sourceDirName:"guides-advanced",slug:"/guides-advanced/performing-asynchronous-work",permalink:"/docs/guides-advanced/performing-asynchronous-work",draft:!1,tags:[],version:"current",frontMatter:{title:"Performing Asynchronous Work"},sidebar:"tutorialSidebar",previous:{title:"FSharp Type Inference",permalink:"/docs/guides-advanced/fsharp-type-inference"},next:{title:"User Settings and the .xll.config File",permalink:"/docs/guides-advanced/user-settings-and-the-xllconfig-file"}},l={},c=[],p={toc:c};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"It is important to only communicate with Excel when it is Ready. For example, if one displays a non modal dialog then the program may fail if it attempts to call a VBA routine in response to a button press while the user is also in the process of editing a cell. Intercepting Window Messages messages etc. can also produce errors even though they are on the main thread. And of course accessing Excel from a different thread is forbidden."),(0,a.kt)("p",null,"The best approach is to enqueue such work to execute on the main Excel thread when it is ready.  Some support for initiating such cross-thread work is now implemented by Excel-DNA, and exposed as methods on the ",(0,a.kt)("inlineCode",{parentName:"p"},"ExcelDna.Integration.ExcelAsyncUtil")," class."),(0,a.kt)("p",null,"To try it you need to"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"call ",(0,a.kt)("inlineCode",{parentName:"li"},"ExcelAsyncUtil.Initialize()")," in your ",(0,a.kt)("inlineCode",{parentName:"li"},"AutoOpen()"),"."),(0,a.kt)("li",{parentName:"ul"},"when you want Excel to do the work, call ",(0,a.kt)("inlineCode",{parentName:"li"},"ExcelAsyncUtil.QueueAsMacro"),".")),(0,a.kt)("p",null,"For example, this menu button starts a Task that takes a while, and\nupon completion it updates cell B1 on Sheet1 using the C API (via an ExcelReference)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'[ExcelCommand(MenuName="Async Test", MenuText="Run Later")](ExcelCommand(MenuName=_Async-Test_,-MenuText=_Run-Later_))\npublic static void RunLater()\n{\n    Task.Factory.StartNew(() => Thread.Sleep(5000))\n    .ContinueWith(t =>\n        ExcelAsyncUtil.QueueAsMacro(() =>\n        {\n            var refB1 = new ExcelReference(0,0,1,1, "Sheet1");\n            refB1.SetValue("Done!");\n        }));\n}\n')),(0,a.kt)("p",null,"Internally this is implemented by adding the ",(0,a.kt)("inlineCode",{parentName:"p"},"QueueAsMacro")," delegate on a queue, and (normally) posting a ",(0,a.kt)("inlineCode",{parentName:"p"},"WM_SYNCMACRO")," event. The delegate is then dequequed by a ",(0,a.kt)("inlineCode",{parentName:"p"},"SyncMacro")," function that is run as an Excel ",(0,a.kt)("inlineCode",{parentName:"p"},"xlfRegister")," ed macro. (There are several functions called ",(0,a.kt)("inlineCode",{parentName:"p"},"SyncMacro")," in the Excel-DNA, the one that is actually registered is in ",(0,a.kt)("inlineCode",{parentName:"p"},"exceldna.cpp"),".)"),(0,a.kt)("p",null,"A new ",(0,a.kt)("inlineCode",{parentName:"p"},"NativeWindow")," on Excel's main event loop traps ",(0,a.kt)("inlineCode",{parentName:"p"},"WM_SYNCMACRO")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"WM_TIMER")," events and attempts to run ",(0,a.kt)("inlineCode",{parentName:"p"},"SyncMacro")," on the main thread. If the attempt fails then the timer is reset for 250ms later. A test is performed to ensure ",(0,a.kt)("inlineCode",{parentName:"p"},"SyncMacro")," is not run while the user is editing a formula. (The same ",(0,a.kt)("inlineCode",{parentName:"p"},"NativeWindow")," is also used for RTD processing.)"))}u.isMDXComponent=!0}}]);