"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[359],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,g=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8024:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={title:"Asynchronous Functions"},i=void 0,s={unversionedId:"archive/guides/asynchronous-functions",id:"archive/guides/asynchronous-functions",title:"Asynchronous Functions",description:"Excel-DNA now has a core implementation to support asynchronous functions. In a future version we might improve the ease of use.",source:"@site/docs/archive/guides/asynchronous-functions.md",sourceDirName:"archive/guides",slug:"/archive/guides/asynchronous-functions",permalink:"/TestDocs/docs/archive/guides/asynchronous-functions",draft:!1,tags:[],version:"current",frontMatter:{title:"Asynchronous Functions"},sidebar:"tutorialSidebar",previous:{title:"Asynchronous Functions with Tasks",permalink:"/TestDocs/docs/archive/guides/asynchronous-functions-with-tasks"},next:{title:"Building Excel-DNA From Source",permalink:"/TestDocs/docs/archive/guides/building-excedna-from-source"}},l={},c=[{value:"Usage",id:"usage",level:2},{value:"More Samples",id:"more-samples",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Excel-DNA now has a core implementation to support asynchronous functions. In a future version we might improve the ease of use."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You have to call ",(0,a.kt)("inlineCode",{parentName:"li"},"ExcelAsyncUtil.Initialize()")," in your ",(0,a.kt)("inlineCode",{parentName:"li"},"AutoOpen"),":")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public class AsyncTestAddIn : IExcelAddIn\n{\n    public void AutoOpen()\n    {\n        ExcelAsyncUtil.Initialize();\n        ExcelIntegration.RegisterUnhandledExceptionHandler(\n            ex => "!!! EXCEPTION: " + ex.ToString());\n    }\n\n    public void AutoClose()\n    {\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Your async UDF then calls ",(0,a.kt)("inlineCode",{parentName:"li"},"AsyncUtil.Run")," like this:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public static object SleepAsync(string ms)\n{\n    return ExcelAsyncUtil.Run("SleepAsync", ms, delegate\n    {\n        Debug.Print("{1:HH:mm:ss.fff} Sleeping for {0} ms", ms, DateTime.Now);\n        Thread.Sleep(int.Parse(ms));\n\n        Debug.Print("{1:HH:mm:ss.fff} Done sleeping {0} ms", ms, DateTime.Now);\n        return "Woke Up at " + DateTime.Now.ToString("1:HH:mm:ss.fff");\n    });\n}\n')),(0,a.kt)("p",null,"The parameters to ExcelAsyncUtil.Run are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string functionName")," - identifies this async function."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"object parameters")," - identifies the set of parameters the function is being called with. Can be a single object (e.g. a string) or an object","[","]","() array of parameters. It should include all the parameters to your UDF."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"}," ExcelFunc function")," - a delegate that will be evaluated asynchronously.")),(0,a.kt)("h2",{id:"more-samples"},"More Samples"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"}," Note: This code does not scale very well, since the web calls block a treadpool thread. Using .NET 4 Tasks or .NET 4.5 async support could lead to a much better implementation. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'public static object DownloadAsync(string url)\n{\n    // Don\'t do anything else here - might run at unexpected times...\n    return ExcelAsyncUtil.Run("DownloadAsync", url,\n        delegate { return Download(url); });\n}\n\npublic static object WebSnippetAsync(string url, string regex)\n{\n    // Don\'t do anything else here - might run at unexpected times...\n    return ExcelAsyncUtil.Run("WebSnippetAsync", new object[]() {url, regex},\n        delegate\n        {\n            string result = Download(url);\n            string match = Regex.Match((result as string), regex,\n                RegexOptions.Singleline).Groups[1](1).Value;\n\n            match = Regex.Replace(match, "\\r", " ");\n            match = Regex.Replace(match, "\\n", " ");\n            match = Regex.Replace(match, "\\t", " ");\n            return match;\n        });\n}\n\nstatic string Download(string url)\n{\n    return new WebClient().DownloadString(url);\n}\n')))}p.isMDXComponent=!0}}]);