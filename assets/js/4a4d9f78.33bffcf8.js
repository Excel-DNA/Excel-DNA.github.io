"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[424],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>b});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(t),b=o,m=u["".concat(l,".").concat(b)]||u[b]||p[b]||i;return t?r.createElement(m,a(a({ref:n},d),{},{components:t})):r.createElement(m,a({ref:n},d))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9345:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const i={title:"Integrating with VBA"},a=void 0,c={unversionedId:"archive/obsolete/integrating-with-vba",id:"archive/obsolete/integrating-with-vba",title:"Integrating with VBA",description:"Excel-DNA can make it easy to call between .NET and VBA. This means existing VBA code need not be rewritten. And end users are likely to find VBA much easier to develop in.",source:"@site/docs/archive/obsolete/integrating-with-vba.md",sourceDirName:"archive/obsolete",slug:"/archive/obsolete/integrating-with-vba",permalink:"/docs/archive/obsolete/integrating-with-vba",draft:!1,tags:[],version:"current",frontMatter:{title:"Integrating with VBA"},sidebar:"tutorialSidebar",previous:{title:"FSharp Standalone Assemblies",permalink:"/docs/archive/obsolete/fsharp-standalone-assemblies"},next:{title:"Returning 1-D Arrays",permalink:"/docs/archive/obsolete/returning-1-d-arrays"}},l={},s=[],d={toc:s};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Excel-DNA can make it easy to call between .NET and VBA. This means existing VBA code need not be rewritten. And end users are likely to find VBA much easier to develop in."),(0,o.kt)("p",null,"To do this, create an Excel-DNA project, and register the a class that will be the entry point from VBA as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'public class AddInRoot : IExcelAddIn\n{\n    public void AutoOpen()\n    {\n        try\n        {\n            var com_addin = new AddInComRoot();\n            com_addin.GetType().InvokeMember("DnaLibrary", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty, null, com_addin, new object[]() { DnaLibrary.CurrentLibrary });\n\n            ExcelComAddInHelper.LoadComAddIn(com_addin);\n        }\n        catch (Exception e)\n        {\n            MessageBox.Show("Error loading COM AddIn: " + e.ToString());\n        }\n    }\n\n    public void AutoClose()\n    {\n    }\n}\n\n\n[ComVisible(true)]\npublic class AddInComRoot : ExcelDna.Integration.CustomUI.ExcelComAddIn\n           // : IDTExtensibility2, i.e. COM "AddIn".ExcelDNA finds this by magic.\n{\n    MyAddinObject _helper;\n\n    public AddInComRoot()\n    {\n    }\n\n    public override void OnConnection(object Application,\n        ext_ConnectMode ConnectMode, object AddInInst, ref Array custom)\n    {\n        _helper = new MyAddinObject();\n\n        AddInInst.GetType().InvokeMember("Object",\n            BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty,\n            null,\n            AddInInst,\n            new object[]() { _helper });\n    }\n\n    public override void OnDisconnection(ext_DisconnectMode RemoveMode, ref Array custom)\n    {\n    }\n\n    public override void OnAddInsUpdate(ref Array custom)\n    {\n    }\n\n    public override void OnStartupComplete(ref Array custom)\n    {\n    }\n\n    public override void OnBeginShutdown(ref Array custom)\n    {\n    }\n}\n\n// This becomes the VBA addin.Object\n[ComVisible(true)]\npublic class MyAddinObject\n{\n    public string SayHello()\n    {\n        return "Hello from the future!";\n    }\n\n    public string ActiveCell3()\n    {\n        var app = (Excel.Application)ExcelDnaUtil.Application;\n        Excel.Range r = app.ActiveCell;\n        return "ActiveCell3: " + r.Value;\n    }\n}\n')),(0,o.kt)("p",null,"We then need to get a handle to the Excel DNA file and call these methods. We need to search through Descriptions because we cannot set the ProgId directly. The object is nothing test is also required as one can easily end up with dead entries in the Addins list. CustomUI ribbon objects may also appear in this list, so test for the entire Description."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'\' In VBA:\nSub TestDnaComAddIn()\n    Dim cai As COMAddIn\n    Dim obj As Object\n    For Each cai In Application.COMAddIns\n        \' Could check cai.Connect to see if it is loaded.\n        Debug.Print cai.Description, cai.GUID\n        If InStr(cai.Description, "MyTitle (COM Add-in Helper)") Then\n            Set obj = cai.Object\n            If obj Is Nothing Then\n              Debug.Print "ObjNothing"\n            Else\n              Debug.Print obj.SayHello(), obj.ActiveCell3\n            End If\n        End If\n    Next\nEnd Sub\n')),(0,o.kt)("p",null,"To call from .NET to VBA it is probably easiest to just use ",(0,o.kt)("inlineCode",{parentName:"p"},"Application.Run"),"."),(0,o.kt)("p",null,"However, be careful about asynchronous calls, see ",(0,o.kt)("a",{parentName:"p",href:"./performing-asynchronous-work"},"Performing Asynchronous Work"),"."))}p.isMDXComponent=!0}}]);