"use strict";(self.webpackChunkexcel_dna=self.webpackChunkexcel_dna||[]).push([[1383],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>p});var r=o(7294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function n(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,r,a=function(e,t){if(null==e)return{};var o,r,a={},n=Object.keys(e);for(r=0;r<n.length;r++)o=n[r],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)o=n[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var o=e.components,a=e.mdxType,n=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(o),p=a,d=m["".concat(l,".").concat(p)]||m[p]||h[p]||n;return o?r.createElement(d,i(i({ref:t},u),{},{components:o})):r.createElement(d,i({ref:t},u))}));function p(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=o.length,i=new Array(n);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<n;s++)i[s]=o[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}m.displayName="MDXCreateElement"},781:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>n,metadata:()=>c,toc:()=>s});var r=o(7462),a=(o(7294),o(3905));const n={},i=void 0,c={unversionedId:"archive/wiki/COM-object-model-notes",id:"archive/wiki/COM-object-model-notes",title:"COM-object-model-notes",description:"* You should only use the Excel COM object model from the main Excel thread. Thus not from other threads, Tasks that you create, timer callbacks that you set up. It's safe to call it from a ribbon callback, of any macro (ExcelCommand). If you have a timer or some other thread that needs to do work back on the main thread, you can start a macro context running on the main thread with a call to ExcelAsyncUtil.QueueAsMacro(...). This waits for Excel to be ready, then runs the delegate you pass. In there, you can use the object model.",source:"@site/docs/archive/wiki/COM-object-model-notes.md",sourceDirName:"archive/wiki",slug:"/archive/wiki/COM-object-model-notes",permalink:"/docs/archive/wiki/COM-object-model-notes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"COM-exports-for-VBA-access",permalink:"/docs/archive/wiki/COM-exports-for-VBA-access"},next:{title:"Diagnostic-Logging",permalink:"/docs/archive/wiki/Diagnostic-Logging"}},l={},s=[],u={toc:s};function h(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You should only use the Excel COM object model from the main Excel thread. Thus ",(0,a.kt)("em",{parentName:"p"},"not")," from other threads, Tasks that you create, timer callbacks that you set up. It's safe to call it from a ribbon callback, of any macro (ExcelCommand). If you have a timer or some other thread that needs to do work back on the main thread, you can start a macro context running on the main thread with a call to ExcelAsyncUtil.QueueAsMacro(...). This waits for Excel to be ready, then runs the delegate you pass. In there, you can use the object model.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Inside UDFs the situation is less clear. There used to be documentation from Microsoft indicating that Excel is not expecting the COM object model to be called from inside an .xll UDF (like those from Excel-DNA). But it seems to work fine to create and read Range object etc. inside the UDF context - I've not heard of problems, so I think it's OK. Of course there are still restrictions in what you can do inside a UDF - basically you can't change the workbook, write to cells etc. But that makes sense and is the same in VBA.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You must get the root Application object from a call to ExcelDnaUtil.Application. That ensures you get the right Application object - calling New Application or CreateObject(...) might give you the Application object from another Excel instance.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You should never call Marshal.ReleaseComObject or Marshal.FinalReleaseComObject on any Excel COM object you're using in an Excel-DNA add-in. See ",(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/37904483/as-of-today-what-is-the-right-way-to-work-with-com-objects/38170605#38170605"},"https://stackoverflow.com/questions/37904483/as-of-today-what-is-the-right-way-to-work-with-com-objects/38170605#38170605"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},'You don\'t have to worry about any "double dot" rules, or any restrictions on "method chaining". Using COM objects inside With and ForEach blocks is fine.')),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"You can get a reference to the Primary Interop Assemblies by installing the ExcelDna.Interop package (this gives you the COM object model up to Excel 2010, helping that you don't use features your users might not have, or blocking you from using new features, depending on your view), or by referencing the PIA assemblies directly from your machine."))),(0,a.kt)("p",null,"The ExcelReference type that Excel-DNA uses is not a COM object, and is really just a small handle to a worksheet region (wrapping the information we get from the C API). So you need no special management around this type, and can pass it between threads, store it in dictionaries etc. The ExcelReference GetValue / SetValue methods internally call the C API, so they will only work in a context where the C API can be called, particularly on the main thread, in a macro or for reading sometimes inside a UDF."))}h.isMDXComponent=!0}}]);